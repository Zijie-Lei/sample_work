"use strict";
/**
 * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Joan Segura <joan.segura@rcsb.org>
 * @author Yana Rose <yana.rose@rcsb.org>
 * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Viewer = exports.BUILD_DATE = exports.BUILD_TIMESTAMP = exports.RCSB_MOLSTAR_VERSION = void 0;
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var plugin_1 = require("molstar/lib/mol-plugin-ui/plugin");
var commands_1 = require("molstar/lib/mol-plugin/commands");
var spec_1 = require("molstar/lib/mol-plugin/spec");
var names_1 = require("molstar/lib/mol-util/color/names");
var React = tslib_1.__importStar(require("react"));
var model_1 = require("./helpers/model");
var controls_1 = require("./ui/controls");
var config_1 = require("molstar/lib/mol-plugin/config");
var behavior_1 = require("molstar/lib/extensions/rcsb/assembly-symmetry/behavior");
var behavior_2 = require("molstar/lib/extensions/rcsb/validation-report/behavior");
var type_helpers_1 = require("molstar/lib/mol-util/type-helpers");
var color_1 = require("./helpers/superpose/color");
var color_2 = require("./helpers/nakb/color");
var viewer_1 = require("./helpers/viewer");
var spec_2 = require("molstar/lib/mol-plugin-ui/spec");
var context_1 = require("molstar/lib/mol-plugin-ui/context");
var behavior_3 = require("molstar/lib/extensions/anvil/behavior");
var representation_1 = require("molstar/lib/extensions/anvil/representation");
var state_snapshots_1 = require("molstar/lib/mol-plugin-state/animation/built-in/state-snapshots");
var features_1 = require("molstar/lib/mol-plugin/features");
var representation_preset_1 = require("molstar/lib/mol-plugin-state/builder/structure/representation-preset");
var behavior_4 = require("molstar/lib/extensions/model-archive/quality-assessment/behavior");
var model_export_1 = require("molstar/lib/extensions/model-export");
var export_1 = require("molstar/lib/extensions/model-export/export");
var geo_export_1 = require("molstar/lib/extensions/geo-export");
var mp4_export_1 = require("molstar/lib/extensions/mp4-export");
var behavior_5 = require("./helpers/rscc/behavior");
var client_1 = require("react-dom/client");
var prop_1 = require("molstar/lib/extensions/rcsb/assembly-symmetry/prop");
exports.RCSB_MOLSTAR_VERSION = typeof __RCSB_MOLSTAR_VERSION__ != 'undefined' ? __RCSB_MOLSTAR_VERSION__ : 'none';
exports.BUILD_TIMESTAMP = typeof __BUILD_TIMESTAMP__ != 'undefined' ? __BUILD_TIMESTAMP__ : 'none';
exports.BUILD_DATE = new Date(exports.BUILD_TIMESTAMP);
var Extensions = {
    'rcsb-assembly-symmetry': spec_1.PluginSpec.Behavior(behavior_1.RCSBAssemblySymmetry),
    'rcsb-validation-report': spec_1.PluginSpec.Behavior(behavior_2.RCSBValidationReport),
    'rscc': spec_1.PluginSpec.Behavior(behavior_5.RSCCScore),
    'anvil-membrane-orientation': spec_1.PluginSpec.Behavior(behavior_3.ANVILMembraneOrientation),
    'ma-quality-assessment': spec_1.PluginSpec.Behavior(behavior_4.MAQualityAssessment),
    'model-export': spec_1.PluginSpec.Behavior(model_export_1.ModelExport),
    'mp4-export': spec_1.PluginSpec.Behavior(mp4_export_1.Mp4Export),
    'geo-export': spec_1.PluginSpec.Behavior(geo_export_1.GeometryExport),
};
var DefaultViewerProps = {
    showImportControls: false,
    showSessionControls: false,
    showStructureSourceControls: true,
    showMeasurementsControls: true,
    showStrucmotifSubmitControls: true,
    showSuperpositionControls: true,
    showQuickStylesControls: false,
    showStructureComponentControls: true,
    showVolumeStreamingControls: true,
    showAssemblySymmetryControls: true,
    showValidationReportControls: true,
    showMembraneOrientationPreset: false,
    showNakbColorTheme: false,
    /**
     * Needed when running outside of sierra. If set to true, the strucmotif UI will use an absolute URL to sierra-prod.
     * Otherwise, the link will be relative on the current host.
     */
    detachedFromSierra: false,
    modelUrlProviders: [
        function (pdbId) { return ({
            url: "https://models.rcsb.org/".concat(pdbId.toLowerCase(), ".bcif"),
            format: 'mmcif',
            isBinary: true
        }); },
        function (pdbId) { return ({
            url: "https://files.rcsb.org/download/".concat(pdbId.toLowerCase(), ".cif"),
            format: 'mmcif',
            isBinary: false
        }); }
    ],
    extensions: (0, type_helpers_1.ObjectKeys)(Extensions),
    layoutIsExpanded: false,
    layoutShowControls: true,
    layoutControlsDisplay: 'reactive',
    layoutShowSequence: true,
    layoutShowLog: false,
    viewportShowExpand: true,
    viewportShowSelectionMode: true,
    volumeStreamingServer: 'https://maps.rcsb.org/',
    backgroundColor: names_1.ColorNames.white,
    showWelcomeToast: true
};
var Viewer = /** @class */ (function () {
    function Viewer(elementOrId, props) {
        if (props === void 0) { props = {}; }
        var _this = this;
        var _a, _b, _c, _d;
        var element = typeof elementOrId === 'string' ? document.getElementById(elementOrId) : elementOrId;
        if (!element)
            throw new Error("Could not get element with id '".concat(elementOrId, "'"));
        var o = tslib_1.__assign(tslib_1.__assign({}, DefaultViewerProps), props);
        var defaultSpec = (0, spec_2.DefaultPluginUISpec)();
        var spec = tslib_1.__assign(tslib_1.__assign({}, defaultSpec), { actions: defaultSpec.actions, behaviors: tslib_1.__spreadArray(tslib_1.__spreadArray([], defaultSpec.behaviors, true), o.extensions.map(function (e) { return Extensions[e]; }), true), animations: tslib_1.__spreadArray([], ((_a = defaultSpec.animations) === null || _a === void 0 ? void 0 : _a.filter(function (a) { return a.name !== state_snapshots_1.AnimateStateSnapshots.name; })) || [], true), layout: {
                initial: {
                    isExpanded: o.layoutIsExpanded,
                    showControls: o.layoutShowControls,
                    controlsDisplay: o.layoutControlsDisplay,
                },
            }, canvas3d: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, defaultSpec.canvas3d), o.canvas3d), { renderer: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, (_b = defaultSpec.canvas3d) === null || _b === void 0 ? void 0 : _b.renderer), (_c = o.canvas3d) === null || _c === void 0 ? void 0 : _c.renderer), { backgroundColor: o.backgroundColor }) }), components: tslib_1.__assign(tslib_1.__assign({}, defaultSpec.components), { controls: tslib_1.__assign(tslib_1.__assign({}, (_d = defaultSpec.components) === null || _d === void 0 ? void 0 : _d.controls), { top: o.layoutShowSequence ? undefined : 'none', bottom: o.layoutShowLog ? undefined : 'none', left: 'none', right: controls_1.ControlsWrapper }), remoteState: 'none' }), config: [
                [config_1.PluginConfig.Viewport.ShowExpand, o.viewportShowExpand],
                [config_1.PluginConfig.Viewport.ShowSelectionMode, o.viewportShowSelectionMode],
                [config_1.PluginConfig.Viewport.ShowAnimation, false],
                [config_1.PluginConfig.VolumeStreaming.DefaultServer, o.volumeStreamingServer],
                [config_1.PluginConfig.Download.DefaultPdbProvider, 'rcsb'],
                [config_1.PluginConfig.Download.DefaultEmdbProvider, 'rcsb'],
                [config_1.PluginConfig.Structure.DefaultRepresentationPreset, representation_preset_1.PresetStructureRepresentations.auto.id],
                // wboit & webgl1 checks are needed to work properly on recent Safari versions
                [config_1.PluginConfig.General.EnableWboit, features_1.PluginFeatureDetection.preferWebGl1],
                [config_1.PluginConfig.General.PreferWebGl1, features_1.PluginFeatureDetection.preferWebGl1]
            ] });
        this._plugin = new context_1.PluginUIContext(spec);
        this.modelUrlProviders = o.modelUrlProviders;
        this._plugin.customState = {
            showImportControls: o.showImportControls,
            showSessionControls: o.showSessionControls,
            showStructureSourceControls: o.showStructureSourceControls,
            showMeasurementsControls: o.showMeasurementsControls,
            showStrucmotifSubmitControls: o.showStrucmotifSubmitControls,
            showSuperpositionControls: o.showSuperpositionControls,
            showQuickStylesControls: o.showQuickStylesControls,
            showStructureComponentControls: o.showStructureComponentControls,
            showVolumeStreamingControls: o.showVolumeStreamingControls,
            showAssemblySymmetryControls: o.showAssemblySymmetryControls,
            showValidationReportControls: o.showValidationReportControls,
            modelLoader: new model_1.ModelLoader(this._plugin),
            collapsed: new rxjs_1.BehaviorSubject({
                selection: true,
                measurements: true,
                strucmotifSubmit: true,
                superposition: true,
                quickStyles: false,
                component: false,
                volume: true,
                assemblySymmetry: true,
                validationReport: true,
                custom: true,
            }),
            detachedFromSierra: o.detachedFromSierra
        };
        this._plugin.init()
            .then(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var root;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // hide 'Membrane Orientation' preset from UI - has to happen 'before' react render, apparently
                        // the corresponding behavior must be registered either way, because the 3d-view uses it (even without appearing in the UI)
                        if (!o.showMembraneOrientationPreset) {
                            this._plugin.builders.structure.representation.unregisterPreset(behavior_3.MembraneOrientationPreset);
                            this._plugin.representation.structure.registry.remove(representation_1.MembraneOrientationRepresentationProvider);
                        }
                        // normally, this would be part of CustomStructureControls -- we want to manage its collapsed state individually though
                        this._plugin.customStructureControls.delete(prop_1.AssemblySymmetry.Tag.Representation);
                        root = (0, client_1.createRoot)(element);
                        root.render(React.createElement(plugin_1.Plugin, { plugin: this._plugin }));
                        this._plugin.representation.structure.themes.colorThemeRegistry.add(color_1.SuperposeColorThemeProvider);
                        if (o.showNakbColorTheme)
                            this._plugin.representation.structure.themes.colorThemeRegistry.add(color_2.NakbColorThemeProvider);
                        if (!o.showWelcomeToast) return [3 /*break*/, 2];
                        return [4 /*yield*/, commands_1.PluginCommands.Toast.Show(this._plugin, {
                                title: 'Welcome',
                                message: "RCSB PDB Mol* Viewer ".concat(exports.RCSB_MOLSTAR_VERSION, " [").concat(exports.BUILD_DATE.toLocaleString(), "]"),
                                key: 'toast-welcome',
                                timeoutMs: 5000
                            })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.prevExpanded = this._plugin.layout.state.isExpanded;
                        this._plugin.layout.events.updated.subscribe(function () { return _this.toggleControls(); });
                        return [2 /*return*/];
                }
            });
        }); });
    }
    Object.defineProperty(Viewer.prototype, "plugin", {
        get: function () {
            return this._plugin;
        },
        enumerable: false,
        configurable: true
    });
    Viewer.prototype.pluginCall = function (f) {
        f(this.plugin);
    };
    Object.defineProperty(Viewer.prototype, "customState", {
        get: function () {
            return this._plugin.customState;
        },
        enumerable: false,
        configurable: true
    });
    Viewer.prototype.toggleControls = function () {
        var currExpanded = this._plugin.layout.state.isExpanded;
        var expandedChanged = (this.prevExpanded !== currExpanded);
        if (!expandedChanged)
            return;
        if (currExpanded && !this._plugin.layout.state.showControls) {
            this._plugin.layout.setProps({ showControls: true });
        }
        else if (!currExpanded && this._plugin.layout.state.showControls) {
            this._plugin.layout.setProps({ showControls: false });
        }
        this.prevExpanded = this._plugin.layout.state.isExpanded;
    };
    Viewer.prototype.resetCamera = function (durationMs) {
        this._plugin.managers.camera.reset(undefined, durationMs);
    };
    Viewer.prototype.clear = function () {
        var state = this._plugin.state.data;
        return commands_1.PluginCommands.State.RemoveObject(this._plugin, { state: state, ref: state.tree.root.ref });
    };
    Viewer.prototype.loadPdbId = function (pdbId, config) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _i, _a, provider, p, e_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _i = 0, _a = this.modelUrlProviders;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 6];
                        provider = _a[_i];
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        p = provider(pdbId);
                        return [4 /*yield*/, this.customState.modelLoader.load({ fileOrUrl: p.url, format: p.format, isBinary: p.isBinary }, config === null || config === void 0 ? void 0 : config.props, config === null || config === void 0 ? void 0 : config.matrix, config === null || config === void 0 ? void 0 : config.reprProvider, config === null || config === void 0 ? void 0 : config.params)];
                    case 3: return [2 /*return*/, _b.sent()];
                    case 4:
                        e_1 = _b.sent();
                        console.warn("loading '".concat(pdbId, "' failed with '").concat(e_1, "', trying next model-loader-provider"));
                        return [3 /*break*/, 5];
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    Viewer.prototype.loadPdbIds = function (args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var out, _i, args_1, _a, pdbId, config, _b, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        out = [];
                        _i = 0, args_1 = args;
                        _d.label = 1;
                    case 1:
                        if (!(_i < args_1.length)) return [3 /*break*/, 4];
                        _a = args_1[_i], pdbId = _a.pdbId, config = _a.config;
                        _c = (_b = out).push;
                        return [4 /*yield*/, this.loadPdbId(pdbId, config)];
                    case 2:
                        _c.apply(_b, [_d.sent()]);
                        _d.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        this.resetCamera(0);
                        return [2 /*return*/, out];
                }
            });
        });
    };
    Viewer.prototype.loadStructureFromUrl = function (url, format, isBinary, config) {
        return this.customState.modelLoader.load({ fileOrUrl: url, format: format, isBinary: isBinary }, config === null || config === void 0 ? void 0 : config.props, config === null || config === void 0 ? void 0 : config.matrix, config === null || config === void 0 ? void 0 : config.reprProvider, config === null || config === void 0 ? void 0 : config.params);
    };
    Viewer.prototype.loadSnapshotFromUrl = function (url, type) {
        return commands_1.PluginCommands.State.Snapshots.OpenUrl(this._plugin, { url: url, type: type });
    };
    Viewer.prototype.loadStructureFromData = function (data, format, isBinary, config) {
        return this.customState.modelLoader.parse({ data: data, format: format, isBinary: isBinary }, config === null || config === void 0 ? void 0 : config.props, config === null || config === void 0 ? void 0 : config.matrix, config === null || config === void 0 ? void 0 : config.reprProvider, config === null || config === void 0 ? void 0 : config.params);
    };
    Viewer.prototype.handleResize = function () {
        this._plugin.layout.events.updated.next(void 0);
    };
    Viewer.prototype.exportLoadedStructures = function (options) {
        return (0, export_1.exportHierarchy)(this.plugin, options);
    };
    Viewer.prototype.setFocus = function (target) {
        (0, viewer_1.setFocusFromRange)(this._plugin, target);
    };
    Viewer.prototype.clearFocus = function () {
        this._plugin.managers.structure.focus.clear();
    };
    Viewer.prototype.select = function (targets, mode, modifier) {
        (0, viewer_1.select)(this._plugin, targets, mode, modifier);
    };
    Viewer.prototype.clearSelection = function (mode, target) {
        (0, viewer_1.clearSelection)(this._plugin, mode, target);
    };
    Viewer.prototype.createComponent = function (label, targets, representationType) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, viewer_1.createComponent)(this._plugin, label, targets, representationType)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Viewer.prototype.removeComponent = function (componentLabel) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, viewer_1.removeComponent)(this._plugin, componentLabel)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Viewer;
}());
exports.Viewer = Viewer;
