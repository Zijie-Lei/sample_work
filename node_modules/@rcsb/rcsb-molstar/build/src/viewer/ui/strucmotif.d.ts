/**
 * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>
 */
/// <reference types="react" />
import { CollapsableControls, PurePluginUIComponent } from 'molstar/lib/mol-plugin-ui/base';
import { ActionMenu } from 'molstar/lib/mol-plugin-ui/controls/action-menu';
import { StructureSelectionHistoryEntry } from 'molstar/lib/mol-plugin-state/manager/structure/selection';
import { StructureElement } from 'molstar/lib/mol-model/structure/structure';
export declare const MAX_EXCHANGES = 4;
/**
 * The top-level component that exposes the strucmotif search.
 */
export declare class StrucmotifSubmitControls extends CollapsableControls {
    protected defaultState(): {
        header: string;
        isCollapsed: boolean;
        brand: {
            accent: "gray";
            svg: typeof SearchIconSvg;
        };
    };
    renderControls(): JSX.Element;
}
export declare function SearchIconSvg(): JSX.Element;
type ExchangeState = number;
type ResidueSelection = {
    label_asym_id: string;
    struct_oper_id: string;
    label_seq_id: number;
};
/**
 * The inner component of strucmotif search that can be collapsed.
 */
declare class SubmitControls extends PurePluginUIComponent<{}, {
    isBusy: boolean;
    residueMap: Map<StructureSelectionHistoryEntry, Residue>;
    action?: ExchangeState;
}> {
    state: {
        isBusy: boolean;
        residueMap: Map<StructureSelectionHistoryEntry, Residue>;
        action: number | undefined;
    };
    componentDidMount(): void;
    get selection(): import("molstar/lib/mol-plugin-state/manager/structure/selection").StructureSelectionManager;
    submitSearch: () => void;
    sortResidueIds(a: ResidueSelection, b: ResidueSelection): number;
    get actions(): ActionMenu.Items;
    selectAction: ActionMenu.OnSelect;
    toggleExchanges: (idx: number) => void;
    highlight(loci: StructureElement.Loci): void;
    moveHistory(e: Residue, direction: 'up' | 'down'): void;
    modifyHistory(e: Residue, a: 'remove'): void;
    updateResidues(): void;
    focusLoci(loci: StructureElement.Loci): void;
    historyEntry(e: Residue, idx: number): JSX.Element;
    add(): JSX.Element;
    render(): JSX.Element;
}
export declare class Residue {
    readonly entry: StructureSelectionHistoryEntry;
    readonly parent: SubmitControls;
    readonly exchanges: Set<string>;
    constructor(entry: StructureSelectionHistoryEntry, parent: SubmitControls);
    toggleExchange(val: string): void;
    hasExchange(val: string): boolean;
}
export {};
