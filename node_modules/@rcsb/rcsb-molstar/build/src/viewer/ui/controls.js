"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlsWrapper = exports.StructureTools = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
var base_1 = require("molstar/lib/mol-plugin-ui/base");
var types_1 = require("../types");
var controls_1 = require("molstar/lib/mol-plugin-ui/controls");
var import_1 = require("./import");
var source_1 = require("molstar/lib/mol-plugin-ui/structure/source");
var measurements_1 = require("molstar/lib/mol-plugin-ui/structure/measurements");
var superposition_1 = require("molstar/lib/mol-plugin-ui/structure/superposition");
var components_1 = require("molstar/lib/mol-plugin-ui/structure/components");
var volume_1 = require("molstar/lib/mol-plugin-ui/structure/volume");
var session_1 = require("./session");
var strucmotif_1 = require("./strucmotif");
var validation_1 = require("./validation");
var quick_styles_1 = require("molstar/lib/mol-plugin-ui/structure/quick-styles");
var ui_1 = require("molstar/lib/extensions/rcsb/assembly-symmetry/ui");
var StructureTools = /** @class */ (function (_super) {
    tslib_1.__extends(StructureTools, _super);
    function StructureTools() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(StructureTools.prototype, "customState", {
        get: function () {
            return (0, types_1.ViewerState)(this.plugin);
        },
        enumerable: false,
        configurable: true
    });
    StructureTools.prototype.componentDidMount = function () {
        var _this = this;
        this.subscribe(this.customState.collapsed, function () { return _this.forceUpdate(); });
    };
    StructureTools.prototype.render = function () {
        var collapsed = this.customState.collapsed.value;
        return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [this.customState.showStructureSourceControls && (0, jsx_runtime_1.jsx)(source_1.StructureSourceControls, {}), this.customState.showMeasurementsControls && (0, jsx_runtime_1.jsx)(measurements_1.StructureMeasurementsControls, { initiallyCollapsed: collapsed.measurements }), this.customState.showStrucmotifSubmitControls && (0, jsx_runtime_1.jsx)(strucmotif_1.StrucmotifSubmitControls, { initiallyCollapsed: collapsed.strucmotifSubmit }), this.customState.showSuperpositionControls && (0, jsx_runtime_1.jsx)(superposition_1.StructureSuperpositionControls, { initiallyCollapsed: collapsed.superposition }), this.customState.showQuickStylesControls && (0, jsx_runtime_1.jsx)(quick_styles_1.StructureQuickStylesControls, { initiallyCollapsed: collapsed.quickStyles }), this.customState.showStructureComponentControls && (0, jsx_runtime_1.jsx)(components_1.StructureComponentControls, { initiallyCollapsed: collapsed.component }), this.customState.showVolumeStreamingControls && (0, jsx_runtime_1.jsx)(volume_1.VolumeStreamingControls, { header: 'Density', initiallyCollapsed: collapsed.volume }), this.customState.showValidationReportControls && (0, jsx_runtime_1.jsx)(validation_1.ValidationReportControls, { initiallyCollapsed: collapsed.validationReport }), this.customState.showAssemblySymmetryControls && (0, jsx_runtime_1.jsx)(ui_1.AssemblySymmetryControls, { initiallyCollapsed: collapsed.assemblySymmetry }), (0, jsx_runtime_1.jsx)(controls_1.CustomStructureControls, { initiallyCollapsed: collapsed.custom })] });
    };
    return StructureTools;
}(base_1.PluginUIComponent));
exports.StructureTools = StructureTools;
var ControlsWrapper = /** @class */ (function (_super) {
    tslib_1.__extends(ControlsWrapper, _super);
    function ControlsWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ControlsWrapper.prototype.render = function () {
        return (0, jsx_runtime_1.jsxs)("div", tslib_1.__assign({ className: 'msp-scrollable-container' }, { children: [(0, types_1.ViewerState)(this.plugin).showImportControls && (0, jsx_runtime_1.jsx)(import_1.ImportControls, {}), (0, types_1.ViewerState)(this.plugin).showSessionControls && (0, jsx_runtime_1.jsx)(session_1.SessionControls, {}), (0, jsx_runtime_1.jsx)(StructureTools, {})] }));
    };
    return ControlsWrapper;
}(base_1.PluginUIComponent));
exports.ControlsWrapper = ControlsWrapper;
