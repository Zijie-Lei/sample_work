import { StructureRepresentationRegistry } from 'molstar/lib/mol-repr/structure/registry';
import { Expression } from 'molstar/lib/mol-script/language/expression';
import { Structure, StructureElement } from 'molstar/lib/mol-model/structure';
export type Range = {
    readonly beg: number;
    readonly end?: number;
};
export type Target = {
    readonly authSeqId?: number;
    readonly labelSeqId?: number;
    readonly labelSeqRange?: Range;
    readonly labelCompId?: string;
    readonly labelAsymId?: string;
    /**
     * Mol*-internal UUID of a model.
     */
    readonly modelId?: string;
    /**
     * Mol*-internal representation, like 'ASM_2'. Enumerated in the order of appearance in the source file. If
     * possible, specify the assemblyId when using this selector.
     */
    readonly operatorName?: string;
    /**
     * Strucmotif-/BioJava-specific representation, like 'Px42'. This is a single 'pdbx_struct_oper_list.id' value or a
     * combination thereof. Specify the assemblyId when using this selector. Order matters, use order as specified in
     * the source CIF file.
     */
    readonly structOperId?: string;
    /**
     * Extend selection to whole chain, by default only the first residue is selected. This is used by the
     * oligoInteraction preset in rcsb-sierra, which should focus the whole oligo chain. Not wanted for the
     * ligandInteraction preset, which would otherwise focus alternative conformations and symmetry mates.
     */
    readonly extendToChain?: boolean;
};
export type SelectBase = {
    readonly modelId: string;
    readonly labelAsymId: string;
    readonly operatorName?: string;
};
export type SelectSingle = {
    readonly labelSeqId: number;
} & SelectBase;
export type SelectRange = {
    readonly labelSeqRange: Range;
} & SelectBase;
export type SelectTarget = SelectSingle | SelectRange;
export type SelectionExpression = {
    tag: string;
    type: StructureRepresentationRegistry.BuiltIn;
    label: string;
    expression: Expression;
    isHidden?: boolean;
    color?: number;
};
/**
 * This serves as adapter between the strucmotif-/BioJava-approach to identify transformed chains and the Mol* way.
 * Looks for 'structOperId', converts it to an 'operatorName', and removes the original value. This will
 * override pre-existing 'operatorName' values.
 * @param targets collection to process
 * @param structure parent structure
 * @param operatorName optional value to which missing operators are set
 */
export declare function normalizeTargets(targets: Target[], structure: Structure, operatorName?: undefined): Target[];
/**
 * Convert a selection to an array of selection expressions.
 * @param labelBase the base label that will appear in the UI (e.g., the entry ID)
 * @param selection a selection by Range or a set of Targets
 */
export declare function createSelectionExpressions(labelBase: string, selection?: Target | Target[]): SelectionExpression[];
export declare const toRange: (start: number, end?: number) => number[];
export declare function rangeToTest(asymId: string, residues: number[], operatorName?: string): {
    'chain-test': Expression;
    'residue-test': Expression;
} | {
    'chain-test': Expression;
    'residue-test'?: undefined;
};
export declare function targetToLoci(target: Target, structure: Structure): StructureElement.Loci;
