"use strict";
/**
 * Copyright (c) 2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Sebastian Bittrich
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NakbColorThemeProvider = exports.NakbColorTheme = exports.getNakbColorThemeParams = exports.NakbColorThemeParams = void 0;
var tslib_1 = require("tslib");
var structure_1 = require("molstar/lib/mol-model/structure");
var color_1 = require("molstar/lib/mol-util/color");
var color_2 = require("molstar/lib/mol-theme/color");
var param_definition_1 = require("molstar/lib/mol-util/param-definition");
var palette_1 = require("molstar/lib/mol-util/color/palette");
var distinct_1 = require("molstar/lib/mol-util/color/distinct");
var util_1 = require("molstar/lib/mol-model/structure/util");
var residue_name_1 = require("molstar/lib/mol-theme/color/residue-name");
var color_3 = require("molstar/lib/mol-util/color/color");
var DefaultColor = (0, color_1.Color)(0xCCCCCC);
var Description = 'Color nucleic residues by their name, color everything else by its `label_entity_id` value.';
exports.NakbColorThemeParams = {};
function getNakbColorThemeParams(_ctx) {
    return param_definition_1.ParamDefinition.clone(exports.NakbColorThemeParams);
}
exports.getNakbColorThemeParams = getNakbColorThemeParams;
var residueColorMap = (0, color_3.getAdjustedColorMap)(residue_name_1.ResidueNameColors, 0, 1);
var paletteProps = param_definition_1.ParamDefinition.getDefaultValues({
    palette: param_definition_1.ParamDefinition.MappedStatic('colors', {
        colors: param_definition_1.ParamDefinition.Group({
            list: param_definition_1.ParamDefinition.ColorList('many-distinct'),
        }, { isFlat: true }),
        generate: param_definition_1.ParamDefinition.Group(tslib_1.__assign(tslib_1.__assign({}, distinct_1.DistinctColorsParams), { maxCount: param_definition_1.ParamDefinition.Numeric(75, { min: 1, max: 250, step: 1 }) }), { isFlat: true })
    }, {
        options: [
            ['colors', 'Color List'],
            ['generate', 'Generate Distinct']
        ]
    })
});
function getAtomicCompId(unit, element) {
    return unit.model.atomicHierarchy.atoms.label_comp_id.value(element);
}
function getCoarseCompId(unit, element) {
    var seqIdBegin = unit.coarseElements.seq_id_begin.value(element);
    var seqIdEnd = unit.coarseElements.seq_id_end.value(element);
    if (seqIdBegin === seqIdEnd) {
        var entityKey = unit.coarseElements.entityKey[element];
        var seq = unit.model.sequence.byEntityKey[entityKey].sequence;
        return seq.compId.value(seqIdBegin - 1); // 1-indexed
    }
}
function isNucleic(location) {
    var moleculeType = (0, util_1.getElementMoleculeType)(location.unit, location.element);
    return moleculeType === 6 /* MoleculeType.RNA */ || moleculeType === 7 /* MoleculeType.DNA */ || moleculeType === 8 /* MoleculeType.PNA */;
}
function residueColor(location) {
    if (structure_1.Unit.isAtomic(location.unit)) {
        var compId = getAtomicCompId(location.unit, location.element);
        return (0, residue_name_1.residueNameColor)(residueColorMap, compId);
    }
    else {
        var compId = getCoarseCompId(location.unit, location.element);
        if (compId)
            return (0, residue_name_1.residueNameColor)(residueColorMap, compId);
    }
    return DefaultColor;
}
function key(entityId, modelIndex) {
    return "".concat(entityId, "|").concat(modelIndex);
}
function getEntityIdSerialMap(structure) {
    var map = new Map();
    for (var i = 0, il = structure.models.length; i < il; ++i) {
        var label_entity_id = structure.models[i].atomicHierarchy.chains.label_entity_id;
        for (var j = 0, jl = label_entity_id.rowCount; j < jl; ++j) {
            var k = key(label_entity_id.value(j), i);
            if (!map.has(k))
                map.set(k, map.size);
        }
        var coarseHierarchy = structure.models[i].coarseHierarchy;
        if (coarseHierarchy.isDefined) {
            var spheres_entity_id = coarseHierarchy.spheres.entity_id;
            for (var j = 0, jl = spheres_entity_id.rowCount; j < jl; ++j) {
                var k = key(spheres_entity_id.value(j), i);
                if (!map.has(k))
                    map.set(k, map.size);
            }
            var gaussians_entity_id = coarseHierarchy.gaussians.entity_id;
            for (var j = 0, jl = gaussians_entity_id.rowCount; j < jl; ++j) {
                var k = key(gaussians_entity_id.value(j), i);
                if (!map.has(k))
                    map.set(k, map.size);
            }
        }
    }
    return map;
}
function getEntityId(location) {
    switch (location.unit.kind) {
        case 0 /* Unit.Kind.Atomic */:
            return structure_1.StructureProperties.chain.label_entity_id(location);
        case 1 /* Unit.Kind.Spheres */:
        case 2 /* Unit.Kind.Gaussians */:
            return structure_1.StructureProperties.coarse.entity_id(location);
    }
}
function NakbColorTheme(ctx, props) {
    var color;
    if (ctx.structure) {
        var l_1 = structure_1.StructureElement.Location.create(ctx.structure.root);
        var entityIdSerialMap_1 = getEntityIdSerialMap(ctx.structure.root);
        var palette_2 = (0, palette_1.getPalette)(entityIdSerialMap_1.size, paletteProps);
        color = function (location) {
            var serial = undefined;
            if (structure_1.StructureElement.Location.is(location)) {
                if (isNucleic(location))
                    return residueColor(location);
                var entityId = getEntityId(location);
                var modelIndex = location.structure.models.indexOf(location.unit.model);
                var k = key(entityId, modelIndex);
                serial = entityIdSerialMap_1.get(k);
            }
            else if (structure_1.Bond.isLocation(location)) {
                l_1.unit = location.aUnit;
                l_1.element = location.aUnit.elements[location.aIndex];
                if (isNucleic(l_1))
                    return residueColor(l_1);
                var entityId = getEntityId(l_1);
                var modelIndex = l_1.structure.models.indexOf(l_1.unit.model);
                var k = key(entityId, modelIndex);
                serial = entityIdSerialMap_1.get(k);
            }
            return serial === undefined ? DefaultColor : palette_2.color(serial);
        };
    }
    else {
        color = function () { return DefaultColor; };
    }
    return {
        factory: NakbColorTheme,
        granularity: 'group',
        color: color,
        props: props,
        description: Description
    };
}
exports.NakbColorTheme = NakbColorTheme;
exports.NakbColorThemeProvider = {
    name: 'nakb',
    label: 'NAKB',
    category: color_2.ColorTheme.Category.Misc,
    factory: NakbColorTheme,
    getParams: getNakbColorThemeParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(exports.NakbColorThemeParams),
    isApplicable: function (ctx) { return !!ctx.structure; }
};
