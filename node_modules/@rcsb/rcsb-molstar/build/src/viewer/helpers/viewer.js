"use strict";
/**
 * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Joan Segura <joan.segura@rcsb.org>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeComponent = exports.createComponent = exports.clearSelection = exports.select = exports.getStructureRefWithModelId = exports.setFocusFromRange = void 0;
var tslib_1 = require("tslib");
var builder_1 = require("molstar/lib/mol-script/language/builder");
var structure_selection_query_1 = require("molstar/lib/mol-plugin-state/helpers/structure-selection-query");
var selection_1 = require("./selection");
function setFocusFromRange(plugin, target) {
    var data = getStructureWithModelId(plugin.managers.structure.hierarchy.current.structures, target);
    if (!data)
        return;
    var loci = (0, selection_1.targetToLoci)(target, data);
    if (!loci)
        return;
    plugin.managers.structure.focus.setFromLoci(loci);
}
exports.setFocusFromRange = setFocusFromRange;
function getStructureWithModelId(structures, target) {
    var _a, _b;
    var structureRef = getStructureRefWithModelId(structures, target);
    if (structureRef)
        return (_b = (_a = structureRef.cell) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data;
}
function getStructureRefWithModelId(structures, target) {
    var _a, _b, _c;
    for (var _i = 0, structures_1 = structures; _i < structures_1.length; _i++) {
        var structure = structures_1[_i];
        if (!((_c = (_b = (_a = structure.cell) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.units))
            continue;
        var unit = structure.cell.obj.data.units[0];
        if (unit.model.id === target.modelId)
            return structure;
    }
}
exports.getStructureRefWithModelId = getStructureRefWithModelId;
function select(plugin, targets, mode, modifier) {
    if (modifier === 'set')
        clearSelection(plugin, mode);
    (Array.isArray(targets) ? targets : [targets]).forEach(function (target, n) {
        var structure = getStructureWithModelId(plugin.managers.structure.hierarchy.current.structures, target);
        if (!structure)
            return;
        var loci = (0, selection_1.targetToLoci)(target, structure);
        if (!loci)
            return;
        if (mode === 'hover') {
            plugin.managers.interactivity.lociHighlights.highlight({ loci: loci });
        }
        else if (mode === 'select') {
            plugin.managers.structure.selection.fromLoci('add', loci);
        }
    });
}
exports.select = select;
function clearSelection(plugin, mode, target) {
    if (mode === 'hover') {
        plugin.managers.interactivity.lociHighlights.clearHighlights();
        return;
    }
    if (!target) {
        plugin.managers.interactivity.lociSelects.deselectAll();
        return;
    }
    var data = getStructureWithModelId(plugin.managers.structure.hierarchy.current.structures, target);
    if (!data)
        return;
    var loci = (0, selection_1.targetToLoci)(target, data);
    plugin.managers.interactivity.lociSelects.deselect({ loci: loci });
}
exports.clearSelection = clearSelection;
function createComponent(plugin, componentLabel, targets, representationType) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _i, _a, target, structureRef, residues, sel;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _i = 0, _a = (Array.isArray(targets) ? targets : [targets]);
                    _b.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    target = _a[_i];
                    structureRef = getStructureRefWithModelId(plugin.managers.structure.hierarchy.current.structures, target);
                    if (!structureRef)
                        throw Error('createComponent error: model not found');
                    residues = toResidues(target);
                    sel = (0, structure_selection_query_1.StructureSelectionQuery)('innerQuery_' + Math.random().toString(36).substring(2), builder_1.MolScriptBuilder.struct.generator.atomGroups((0, selection_1.rangeToTest)(target.labelAsymId, residues, target.operatorName)));
                    return [4 /*yield*/, plugin.managers.structure.component.add({
                            selection: sel,
                            options: { checkExisting: false, label: componentLabel },
                            representation: representationType,
                        }, [structureRef])];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.createComponent = createComponent;
function toResidues(target) {
    if ('labelSeqRange' in target) {
        return (0, selection_1.toRange)(target.labelSeqRange.beg, target.labelSeqRange.end);
    }
    if ('labelSeqId' in target) {
        return [target.labelSeqId];
    }
    return [];
}
function removeComponent(plugin, componentLabel) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var out;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    out = [];
                    plugin.managers.structure.hierarchy.currentComponentGroups.forEach(function (c) {
                        var _a;
                        for (var _i = 0, c_1 = c; _i < c_1.length; _i++) {
                            var comp = c_1[_i];
                            if (((_a = comp.cell.obj) === null || _a === void 0 ? void 0 : _a.label) === componentLabel) {
                                var o = plugin.managers.structure.hierarchy.remove(c);
                                if (o)
                                    out.push(o);
                                break;
                            }
                        }
                    });
                    return [4 /*yield*/, Promise.all(out)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.removeComponent = removeComponent;
