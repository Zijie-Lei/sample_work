"use strict";
/**
 * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RcsbPreset = exports.Mat4 = void 0;
var tslib_1 = require("tslib");
var param_definition_1 = require("molstar/lib/mol-util/param-definition");
var hierarchy_preset_1 = require("molstar/lib/mol-plugin-state/builder/structure/hierarchy-preset");
var behavior_1 = require("molstar/lib/extensions/rcsb/validation-report/behavior");
var behavior_2 = require("molstar/lib/extensions/rcsb/assembly-symmetry/behavior");
var representation_preset_1 = require("molstar/lib/mol-plugin-state/builder/structure/representation-preset");
var structure_1 = require("molstar/lib/mol-model/structure");
var types_1 = require("../types");
var mol_state_1 = require("molstar/lib/mol-state");
var model_1 = require("molstar/lib/mol-plugin-state/transforms/model");
var flexible_structure_1 = require("./superpose/flexible-structure");
var commands_1 = require("molstar/lib/mol-plugin/commands");
var behavior_3 = require("molstar/lib/extensions/anvil/behavior");
var state_1 = require("molstar/lib/mol-plugin/behavior/static/state");
var behavior_4 = require("molstar/lib/mol-plugin/behavior/dynamic/volume-streaming/behavior");
var transformers_1 = require("molstar/lib/mol-plugin/behavior/dynamic/volume-streaming/transformers");
var selection_1 = require("./selection");
var preset_1 = require("./superpose/preset");
var prop_1 = require("molstar/lib/extensions/rcsb/assembly-symmetry/prop");
var mol_task_1 = require("molstar/lib/mol-task");
var plddt_1 = require("molstar/lib/extensions/model-archive/quality-assessment/color/plddt");
var linear_algebra_1 = require("molstar/lib/mol-math/linear-algebra");
Object.defineProperty(exports, "Mat4", { enumerable: true, get: function () { return linear_algebra_1.Mat4; } });
var RcsbParams = function () { return ({
    preset: param_definition_1.ParamDefinition.Value({ kind: 'standard', assemblyId: '' }, { isHidden: true })
}); };
var CommonParams = representation_preset_1.StructureRepresentationPresetProvider.CommonParams;
exports.RcsbPreset = (0, hierarchy_preset_1.TrajectoryHierarchyPresetProvider)({
    id: 'preset-trajectory-rcsb',
    display: { name: 'RCSB' },
    isApplicable: function () { return true; },
    params: RcsbParams,
    apply: function (trajectory, params, plugin) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var builder, p, modelParams, structureParams, model, modelProperties, structure, structureProperties, unitcell, allowsFlexTransform, presetParams, representation, _structure, _structureProperties, _i, _b, c, colorValue, targets, _c, targets_1, target, residues, _d, residues_1, num, entryId, selectionExpressions, _e, _f, target, additions, targets, selectionExpressions, globalExpressions, additions, data_1, error_1, msg, loci, chainMode, selection, s, target;
            var _this = this;
            return tslib_1.__generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        builder = plugin.builders.structure;
                        p = params.preset;
                        modelParams = { modelIndex: p.modelIndex || 0 };
                        // jump through some hoops to determine the unknown assemblyId of query selections
                        if (p.kind === 'motif')
                            determineAssemblyId(trajectory, p);
                        structureParams = { name: 'model', params: {} };
                        if (p.assemblyId && p.assemblyId !== '' && p.assemblyId !== '0') {
                            Object.assign(structureParams, {
                                name: 'assembly',
                                params: { id: p.assemblyId }
                            });
                        }
                        return [4 /*yield*/, builder.createModel(trajectory, modelParams)];
                    case 1:
                        model = _g.sent();
                        return [4 /*yield*/, builder.insertModelProperties(model)];
                    case 2:
                        modelProperties = _g.sent();
                        structure = undefined;
                        structureProperties = undefined;
                        unitcell = undefined;
                        allowsFlexTransform = p.kind === 'alignment';
                        if (!!allowsFlexTransform) return [3 /*break*/, 6];
                        return [4 /*yield*/, builder.createStructure(modelProperties || model, structureParams)];
                    case 3:
                        structure = _g.sent();
                        return [4 /*yield*/, builder.insertStructureProperties(structure)];
                    case 4:
                        structureProperties = _g.sent();
                        if (!(p.kind !== 'motif')) return [3 /*break*/, 6];
                        return [4 /*yield*/, builder.tryCreateUnitcell(modelProperties, undefined, { isHidden: true })];
                    case 5:
                        unitcell = _g.sent();
                        _g.label = 6;
                    case 6:
                        presetParams = Object.create(null);
                        if (checkPlddtColorTheme(structure, (_a = p.plddt) !== null && _a !== void 0 ? _a : 'single-chain')) {
                            Object.assign(presetParams, { theme: { globalName: 'plddt-confidence', focus: { name: 'plddt-confidence' } } });
                        }
                        representation = undefined;
                        if (!(p.kind === 'alignment')) return [3 /*break*/, 10];
                        _structure = plugin.state.data.build().to(modelProperties)
                            .apply(flexible_structure_1.FlexibleStructureFromModel, { targets: p.targets });
                        return [4 /*yield*/, _structure.commit()];
                    case 7:
                        structure = _g.sent();
                        _structureProperties = plugin.state.data.build().to(structure)
                            .apply(model_1.CustomStructureProperties);
                        return [4 /*yield*/, _structureProperties.commit()];
                    case 8:
                        structureProperties = _g.sent();
                        // adding coloring lookup scheme
                        structure.data.inheritedPropertyData.colors = Object.create(null);
                        for (_i = 0, _b = p.colors; _i < _b.length; _i++) {
                            c = _b[_i];
                            colorValue = c.value;
                            targets = c.targets;
                            for (_c = 0, targets_1 = targets; _c < targets_1.length; _c++) {
                                target = targets_1[_c];
                                if (!target.labelAsymId)
                                    continue;
                                if (!structure.data.inheritedPropertyData.colors[target.labelAsymId])
                                    structure.data.inheritedPropertyData.colors[target.labelAsymId] = new Map();
                                residues = (target.labelSeqRange) ? (0, selection_1.toRange)(target.labelSeqRange.beg, target.labelSeqRange.end) : [];
                                for (_d = 0, residues_1 = residues; _d < residues_1.length; _d++) {
                                    num = residues_1[_d];
                                    structure.data.inheritedPropertyData.colors[target.labelAsymId].set(num, colorValue);
                                }
                            }
                        }
                        entryId = model.data.entryId;
                        selectionExpressions = [];
                        if (p.targets) {
                            for (_e = 0, _f = p.targets; _e < _f.length; _e++) {
                                target = _f[_e];
                                selectionExpressions = selectionExpressions.concat((0, selection_1.createSelectionExpressions)(entryId, target));
                            }
                        }
                        else {
                            selectionExpressions = selectionExpressions.concat((0, selection_1.createSelectionExpressions)(entryId));
                        }
                        additions = {
                            ignoreHydrogens: CommonParams.ignoreHydrogens.defaultValue,
                            quality: CommonParams.quality.defaultValue,
                            theme: { globalName: 'superpose', focus: { name: 'superpose' } },
                            selectionExpressions: selectionExpressions
                        };
                        return [4 /*yield*/, plugin.builders.structure.representation.applyPreset(structureProperties, preset_1.RcsbSuperpositionRepresentationPreset, tslib_1.__assign(tslib_1.__assign({}, presetParams), additions))];
                    case 9:
                        representation = _g.sent();
                        return [3 /*break*/, 29];
                    case 10:
                        if (!(p.kind === 'motif' && (structure === null || structure === void 0 ? void 0 : structure.obj))) return [3 /*break*/, 12];
                        targets = (0, selection_1.normalizeTargets)(p.targets, structure.obj.data);
                        selectionExpressions = (0, selection_1.createSelectionExpressions)(p.label || model.data.entryId, targets);
                        globalExpressions = (0, selection_1.createSelectionExpressions)(p.label || model.data.entryId);
                        selectionExpressions = selectionExpressions.concat(globalExpressions.map(function (e) { return tslib_1.__assign(tslib_1.__assign({}, e), { isHidden: true }); }));
                        if (p.color) {
                            selectionExpressions = selectionExpressions.map(function (e) { return tslib_1.__assign(tslib_1.__assign({}, e), { color: p.color }); });
                        }
                        additions = {
                            ignoreHydrogens: true,
                            quality: CommonParams.quality.defaultValue,
                            selectionExpressions: selectionExpressions
                        };
                        return [4 /*yield*/, plugin.builders.structure.representation.applyPreset(structureProperties, preset_1.RcsbSuperpositionRepresentationPreset, tslib_1.__assign(tslib_1.__assign({}, presetParams), additions))];
                    case 11:
                        representation = _g.sent();
                        return [3 /*break*/, 29];
                    case 12:
                        if (!(p.kind === 'validation')) return [3 /*break*/, 14];
                        return [4 /*yield*/, plugin.builders.structure.representation.applyPreset(structureProperties, behavior_1.ValidationReportGeometryQualityPreset, presetParams)];
                    case 13:
                        representation = _g.sent();
                        return [3 /*break*/, 29];
                    case 14:
                        if (!(p.kind === 'symmetry' && (structure === null || structure === void 0 ? void 0 : structure.obj))) return [3 /*break*/, 18];
                        data_1 = structure.obj.data;
                        if (!!prop_1.AssemblySymmetryDataProvider.get(data_1).value) return [3 /*break*/, 16];
                        return [4 /*yield*/, plugin.runTask(mol_task_1.Task.create('Assembly Symmetry', function (runtime) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var propCtx;
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            propCtx = { runtime: runtime, assetManager: plugin.managers.asset };
                                            return [4 /*yield*/, prop_1.AssemblySymmetryDataProvider.attach(propCtx, data_1)];
                                        case 1:
                                            _a.sent();
                                            return [4 /*yield*/, prop_1.AssemblySymmetryProvider.attach(propCtx, data_1, { symmetryIndex: p.symmetryIndex })];
                                        case 2:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 15:
                        _g.sent();
                        _g.label = 16;
                    case 16: return [4 /*yield*/, plugin.builders.structure.representation.applyPreset(structureProperties, behavior_2.AssemblySymmetryPreset, presetParams)];
                    case 17:
                        representation = _g.sent();
                        (0, types_1.ViewerState)(plugin).collapsed.next(tslib_1.__assign(tslib_1.__assign({}, (0, types_1.ViewerState)(plugin).collapsed.value), { assemblySymmetry: false }));
                        return [3 /*break*/, 29];
                    case 18:
                        if (!(p.kind === 'empty')) return [3 /*break*/, 19];
                        console.warn('Using empty representation');
                        return [3 /*break*/, 29];
                    case 19:
                        if (!(p.kind === 'membrane')) return [3 /*break*/, 25];
                        _g.label = 20;
                    case 20:
                        _g.trys.push([20, 22, , 24]);
                        return [4 /*yield*/, plugin.builders.structure.representation.applyPreset(structureProperties, behavior_3.MembraneOrientationPreset, presetParams)];
                    case 21:
                        representation = _g.sent();
                        // reset the camera because the membranes render 1st and the structure might not be fully visible
                        requestAnimationFrame(function () { var _a; return (_a = plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.requestCameraReset(); });
                        return [3 /*break*/, 24];
                    case 22:
                        error_1 = _g.sent();
                        msg = 'Membrane calculation failed! - This can happen for tiny structures with only a dozen of residues.';
                        plugin.log.error(msg);
                        console.error(msg);
                        console.error(error_1);
                        return [4 /*yield*/, plugin.builders.structure.representation.applyPreset(structureProperties, 'auto', presetParams)];
                    case 23:
                        // fall back to default representation to show something
                        representation = _g.sent();
                        return [3 /*break*/, 24];
                    case 24: return [3 /*break*/, 29];
                    case 25:
                        if (!(p.kind === 'nakb')) return [3 /*break*/, 27];
                        return [4 /*yield*/, plugin.builders.structure.representation.applyPreset(structureProperties, 'auto', tslib_1.__assign(tslib_1.__assign({}, presetParams), { theme: { globalName: 'nakb', focus: { name: 'nakb' } } }))];
                    case 26:
                        representation = _g.sent();
                        return [3 /*break*/, 29];
                    case 27: return [4 /*yield*/, plugin.builders.structure.representation.applyPreset(structureProperties, 'auto', presetParams)];
                    case 28:
                        representation = _g.sent();
                        _g.label = 29;
                    case 29:
                        if (!((p.kind === 'feature' || p.kind === 'feature-density') && (structure === null || structure === void 0 ? void 0 : structure.obj))) return [3 /*break*/, 34];
                        loci = (0, selection_1.targetToLoci)(p.target, structure.obj.data);
                        chainMode = !!p.target.extendToChain;
                        if (!(loci.elements.length === 0 && !!p.assemblyId)) return [3 /*break*/, 31];
                        selection = plugin.managers.structure.hierarchy.selection;
                        s = selection.structures[0];
                        return [4 /*yield*/, plugin.managers.structure.hierarchy.updateStructure(s, tslib_1.__assign(tslib_1.__assign({}, params), { preset: tslib_1.__assign(tslib_1.__assign({}, params.preset), { assemblyId: void 0 }) }))];
                    case 30:
                        _g.sent();
                        // update loci
                        loci = (0, selection_1.targetToLoci)(p.target, structure.obj.data);
                        _g.label = 31;
                    case 31:
                        target = chainMode ? loci : structure_1.StructureElement.Loci.firstResidue(loci);
                        if (!(p.kind === 'feature-density')) return [3 /*break*/, 33];
                        return [4 /*yield*/, initVolumeStreaming(plugin, structure, { overrideRadius: p.radius || 0, hiddenChannels: p.hiddenChannels || ['fo-fc(+ve)', 'fo-fc(-ve)'] })];
                    case 32:
                        _g.sent();
                        _g.label = 33;
                    case 33:
                        plugin.managers.structure.focus.setFromLoci(target);
                        plugin.managers.camera.focusLoci(target);
                        _g.label = 34;
                    case 34:
                        if (!(p.kind === 'density' && structure)) return [3 /*break*/, 37];
                        return [4 /*yield*/, initVolumeStreaming(plugin, structure)];
                    case 35:
                        _g.sent();
                        return [4 /*yield*/, commands_1.PluginCommands.Toast.Show(plugin, {
                                title: 'Electron Density',
                                message: 'Click on a residue to display electron density, click background to reset.',
                                key: 'toast-density',
                                timeoutMs: 60000
                            })];
                    case 36:
                        _g.sent();
                        plugin.behaviors.interaction.click.subscribe(function (e) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(e.current && e.current.loci && e.current.loci.kind !== 'empty-loci')) return [3 /*break*/, 2];
                                        return [4 /*yield*/, commands_1.PluginCommands.Toast.Hide(plugin, { key: 'toast-density' })];
                                    case 1:
                                        _a.sent();
                                        _a.label = 2;
                                    case 2: return [2 /*return*/];
                                }
                            });
                        }); });
                        _g.label = 37;
                    case 37: return [2 /*return*/, {
                            model: model,
                            modelProperties: modelProperties,
                            unitcell: unitcell,
                            structure: structure,
                            structureProperties: structureProperties,
                            representation: representation
                        }];
                }
            });
        });
    }
});
function checkPlddtColorTheme(structure, plddt) {
    var _a;
    if (!(structure === null || structure === void 0 ? void 0 : structure.data))
        return false;
    if (plddt === 'off')
        return false;
    if (plddt === 'single-chain' && ((_a = structure.data) === null || _a === void 0 ? void 0 : _a.polymerUnitCount) !== 1)
        return false;
    return plddt_1.PLDDTConfidenceColorThemeProvider.isApplicable({ structure: structure.data });
}
function determineAssemblyId(traj, p) {
    // nothing to do if assembly is known
    if (p.assemblyId && p.assemblyId !== '' && p.assemblyId !== '0')
        return;
    function equals(expr, val) {
        var list = parseOperatorList(expr);
        var split = val.split('x');
        var matches = 0;
        for (var i = 0, il = Math.min(list.length, split.length); i < il; i++) {
            if (list[i].indexOf(split[i]) !== -1)
                matches++;
        }
        return matches === split.length;
    }
    function parseOperatorList(value) {
        // '(X0)(1-5)' becomes [['X0'], ['1', '2', '3', '4', '5']]
        // kudos to Glen van Ginkel.
        var oeRegex = /\(?([^()]+)\)?]*/g, groups = [], ret = [];
        var g;
        while (g = oeRegex.exec(value))
            groups[groups.length] = g[1];
        groups.forEach(function (g) {
            var group = [];
            g.split(',').forEach(function (e) {
                var dashIndex = e.indexOf('-');
                if (dashIndex > 0) {
                    var from = parseInt(e.substring(0, dashIndex)), to = parseInt(e.substring(dashIndex + 1));
                    for (var i = from; i <= to; i++)
                        group[group.length] = i.toString();
                }
                else {
                    group[group.length] = e.trim();
                }
            });
            ret[ret.length] = group;
        });
        return ret;
    }
    // set of provided [structOperId, labelAsymId] combinations
    var ids = p.targets.map(function (t) { return [t.structOperId || '1', t.labelAsymId]; }).filter(function (x, i, a) { return a.indexOf(x) === i; });
    try {
        // find first assembly that contains all requested structOperIds - if multiple, the first will be returned
        var pdbx_struct_assembly_gen = traj.obj.data.representative.sourceData.data.frame.categories.pdbx_struct_assembly_gen;
        if (pdbx_struct_assembly_gen) {
            var assembly_id = pdbx_struct_assembly_gen.getField('assembly_id');
            var oper_expression_1 = pdbx_struct_assembly_gen.getField('oper_expression');
            var asym_id_list_1 = pdbx_struct_assembly_gen.getField('asym_id_list');
            var _loop_1 = function (i, il) {
                if (ids.some(function (val) { return !equals(oper_expression_1.str(i), val[0]) || asym_id_list_1.str(i).indexOf(val[1]) === -1; }))
                    return "continue";
                Object.assign(p, { assemblyId: assembly_id.str(i) });
                return { value: void 0 };
            };
            for (var i = 0, il = pdbx_struct_assembly_gen.rowCount; i < il; i++) {
                var state_2 = _loop_1(i, il);
                if (typeof state_2 === "object")
                    return state_2.value;
            }
        }
        else {
            // this happens e.g. for AlphaFold structures
            console.warn("Source file is missing 'pdbx_struct_assembly_gen' category");
        }
    }
    catch (error) {
        console.warn(error);
    }
    // default to '1' if error or legitimately not found
    console.warn("Could not auto-detect assembly-of-interest. Falling back to '1'");
    Object.assign(p, { assemblyId: '1' });
}
function initVolumeStreaming(plugin, structure, props) {
    var _a, _b;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var volumeRoot, state, params, _c, params_1, transform, p, cells, _i, cells_1, cell;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!((_a = structure === null || structure === void 0 ? void 0 : structure.cell) === null || _a === void 0 ? void 0 : _a.parent))
                        return [2 /*return*/];
                    volumeRoot = mol_state_1.StateSelection.findTagInSubtree(structure.cell.parent.tree, structure.cell.transform.ref, behavior_4.VolumeStreaming.RootTag);
                    if (!!volumeRoot) return [3 /*break*/, 4];
                    state = plugin.state.data;
                    params = param_definition_1.ParamDefinition.getDefaultValues(transformers_1.InitVolumeStreaming.definition.params(structure.obj, plugin));
                    return [4 /*yield*/, plugin.runTask(state.applyAction(transformers_1.InitVolumeStreaming, params, structure.ref))];
                case 1:
                    _d.sent();
                    if (!((props === null || props === void 0 ? void 0 : props.overrideRadius) !== void 0)) return [3 /*break*/, 3];
                    _c = state.select(mol_state_1.StateSelection.Generators.ofType(behavior_4.VolumeStreaming))[0], params_1 = _c.params, transform = _c.transform;
                    p = params_1 === null || params_1 === void 0 ? void 0 : params_1.values;
                    p.entry.params.view.params.radius = props.overrideRadius;
                    return [4 /*yield*/, state.build().to(transform.ref).update(p).commit()];
                case 2:
                    _d.sent();
                    _d.label = 3;
                case 3:
                    // RO-2751: hide all but 2Fo-Fc map
                    if ((_b = props === null || props === void 0 ? void 0 : props.hiddenChannels) === null || _b === void 0 ? void 0 : _b.length) {
                        cells = state.select(mol_state_1.StateSelection.Generators.ofTransformer(transformers_1.VolumeStreamingVisual));
                        for (_i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
                            cell = cells_1[_i];
                            if (props.hiddenChannels.indexOf(cell.obj.tags[0]) !== -1) {
                                (0, state_1.setSubtreeVisibility)(state, cell.transform.ref, true);
                            }
                        }
                    }
                    _d.label = 4;
                case 4:
                    (0, types_1.ViewerState)(plugin).collapsed.next(tslib_1.__assign(tslib_1.__assign({}, (0, types_1.ViewerState)(plugin).collapsed.value), { volume: false }));
                    return [2 /*return*/];
            }
        });
    });
}
