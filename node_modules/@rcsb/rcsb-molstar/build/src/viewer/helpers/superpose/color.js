"use strict";
/**
 * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Yana Rose
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuperposeColorThemeProvider = exports.SuperposeColorTheme = void 0;
var color_1 = require("molstar/lib/mol-theme/color");
var param_definition_1 = require("molstar/lib/mol-util/param-definition");
var color_2 = require("molstar/lib/mol-util/color");
var structure_1 = require("molstar/lib/mol-model/structure");
function SuperposeColorTheme(ctx, props) {
    var _a;
    var colorLookup = (_a = ctx.structure) === null || _a === void 0 ? void 0 : _a.inheritedPropertyData.colors;
    var defaultColorLookup = new Map();
    for (var _i = 0, _b = Object.entries(colorLookup); _i < _b.length; _i++) {
        var _c = _b[_i], asymId = _c[0], seqIds = _c[1];
        var colorValue = seqIds.values().next().value;
        var defaultColor = color_2.Color.desaturate(color_2.Color.lighten(colorValue, 1.7), 1.2);
        defaultColorLookup.set(asymId, defaultColor);
    }
    var DefaultColor = (0, color_2.Color)(0xCCCCCC);
    var colorValues = Array.from(defaultColorLookup.values());
    if (colorValues.every(function (val, i, arr) { return val === arr[0]; })) {
        DefaultColor = colorValues[0];
    }
    var l = structure_1.StructureElement.Location.create();
    var _color = function (location) {
        var _a, _b, _c;
        var asymId = structure_1.StructureProperties.chain.label_asym_id(location);
        var seqId = structure_1.StructureProperties.residue.label_seq_id(location);
        if ((_a = colorLookup === null || colorLookup === void 0 ? void 0 : colorLookup[asymId]) === null || _a === void 0 ? void 0 : _a.has(seqId)) {
            if (((_b = colorLookup[asymId]) === null || _b === void 0 ? void 0 : _b.get(seqId)) !== undefined) {
                return (_c = colorLookup[asymId]) === null || _c === void 0 ? void 0 : _c.get(seqId);
            }
        }
        else if (colorLookup === null || colorLookup === void 0 ? void 0 : colorLookup[asymId]) {
            return defaultColorLookup.get(asymId);
        }
        return DefaultColor;
    };
    var color = function (location) {
        if (structure_1.StructureElement.Location.is(location)) {
            return _color(location);
        }
        else if (structure_1.Bond.isLocation(location)) {
            l.structure = location.aStructure;
            l.unit = location.aUnit;
            l.element = location.aUnit.elements[location.aIndex];
            return _color(l);
        }
        return DefaultColor;
    };
    return {
        factory: SuperposeColorTheme,
        granularity: 'group',
        color: color,
        props: props,
        description: 'Superpose coloring',
    };
}
exports.SuperposeColorTheme = SuperposeColorTheme;
exports.SuperposeColorThemeProvider = {
    name: 'superpose',
    label: 'Superpose',
    category: color_1.ColorTheme.Category.Misc,
    factory: SuperposeColorTheme,
    getParams: function () { return ({}); },
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues({}),
    isApplicable: function (ctx) { return !!ctx.structure && !!ctx.structure.inheritedPropertyData.colors; },
};
