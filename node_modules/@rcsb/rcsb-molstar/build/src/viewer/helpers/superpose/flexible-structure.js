"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlexibleStructureFromModel = void 0;
var tslib_1 = require("tslib");
var objects_1 = require("molstar/lib/mol-plugin-state/objects");
var root_structure_1 = require("molstar/lib/mol-plugin-state/helpers/root-structure");
var mol_task_1 = require("molstar/lib/mol-task");
var param_definition_1 = require("molstar/lib/mol-util/param-definition");
var structure_query_1 = require("molstar/lib/mol-plugin-state/helpers/structure-query");
var builder_1 = require("molstar/lib/mol-script/language/builder");
var structure_1 = require("molstar/lib/mol-model/structure");
var selection_1 = require("../selection");
var FlexibleStructureFromModel = objects_1.PluginStateTransform.BuiltIn({
    name: 'flexible-structure-from-model',
    display: { name: 'Flexible Structure', description: 'Create a molecular structure from independently transformed substructures.' },
    from: objects_1.PluginStateObject.Molecule.Model,
    to: objects_1.PluginStateObject.Molecule.Structure,
    isDecorator: true,
    params: function (_a) {
        return {
            targets: param_definition_1.ParamDefinition.Value([])
        };
    }
})({
    apply: function (_b, plugin) {
        var _this = this;
        var a = _b.a, params = _b.params;
        return mol_task_1.Task.create('Build Flexible Structure', function (ctx) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var base, targets, selectChains, selectBlocks, _i, targets_1, target, residues, test, expression, sele, s, ts, builder, _b, selectBlocks_1, blocks, u, _c, blocks_1, b, u, blockStructure;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, root_structure_1.RootStructureDefinition.create(plugin, ctx, a.data)];
                    case 1:
                        base = _d.sent();
                        targets = params.targets;
                        if (!(targets === null || targets === void 0 ? void 0 : targets.length))
                            return [2 /*return*/, base];
                        selectChains = [];
                        selectBlocks = [];
                        for (_i = 0, targets_1 = targets; _i < targets_1.length; _i++) {
                            target = targets_1[_i];
                            if (!target.labelAsymId)
                                continue;
                            if (!selectChains.includes(target.labelAsymId)) {
                                selectChains.push(target.labelAsymId);
                                selectBlocks.push([]);
                            }
                            residues = (target.labelSeqRange) ? (0, selection_1.toRange)(target.labelSeqRange.beg, target.labelSeqRange.end) : [];
                            test = (0, selection_1.rangeToTest)(target.labelAsymId, residues);
                            expression = builder_1.MolScriptBuilder.struct.generator.atomGroups(test);
                            sele = structure_query_1.StructureQueryHelper.createAndRun(base.data, expression).selection;
                            s = structure_1.StructureSelection.unionStructure(sele);
                            if (!target.matrix) {
                                selectBlocks[selectChains.indexOf(target.labelAsymId)].push(s);
                            }
                            else {
                                ts = structure_1.Structure.transform(s, target.matrix);
                                selectBlocks[selectChains.indexOf(target.labelAsymId)].push(ts);
                            }
                        }
                        builder = structure_1.Structure.Builder({ label: base.data.label });
                        for (_b = 0, selectBlocks_1 = selectBlocks; _b < selectBlocks_1.length; _b++) {
                            blocks = selectBlocks_1[_b];
                            if (blocks.length === 1) {
                                u = blocks[0].units[0];
                                builder.addUnit(u.kind, u.model, u.conformation.operator, u.elements, u.traits, u.invariantId);
                            }
                            else {
                                builder.beginChainGroup();
                                for (_c = 0, blocks_1 = blocks; _c < blocks_1.length; _c++) {
                                    b = blocks_1[_c];
                                    u = b.units[0];
                                    builder.addUnit(u.kind, u.model, u.conformation.operator, u.elements, u.traits, u.invariantId);
                                }
                                builder.endChainGroup();
                            }
                        }
                        blockStructure = builder.getStructure();
                        return [2 /*return*/, new objects_1.PluginStateObject.Molecule.Structure(blockStructure, { label: base.data.label })];
                }
            });
        }); });
    },
    dispose: function (_b) {
        var b = _b.b;
        b === null || b === void 0 ? void 0 : b.data.customPropertyDescriptors.dispose();
    }
});
exports.FlexibleStructureFromModel = FlexibleStructureFromModel;
