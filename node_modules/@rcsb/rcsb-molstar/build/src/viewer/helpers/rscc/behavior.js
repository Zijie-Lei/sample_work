"use strict";
/**
 * Copyright (c) 2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RSCCScore = exports.RSCCPreset = void 0;
var tslib_1 = require("tslib");
var representation_preset_1 = require("molstar/lib/mol-plugin-state/builder/structure/representation-preset");
var prop_1 = require("molstar/lib/extensions/rcsb/validation-report/prop");
var model_1 = require("molstar/lib/mol-model/structure/model");
var mol_state_1 = require("molstar/lib/mol-state");
var color_1 = require("./color");
var behavior_1 = require("molstar/lib/mol-plugin/behavior/behavior");
var prop_2 = require("./prop");
var structure_1 = require("molstar/lib/mol-model/structure/structure");
var int_1 = require("molstar/lib/mol-data/int");
var param_definition_1 = require("molstar/lib/mol-util/param-definition");
var mol_task_1 = require("molstar/lib/mol-task");
exports.RSCCPreset = (0, representation_preset_1.StructureRepresentationPresetProvider)({
    id: 'preset-structure-representation-rcsb-validation-report-rscc',
    display: {
        name: 'Validation Report (Experimental Support)', group: 'Annotation',
        description: 'Color structure based on real-space correlation coefficients. Data from wwPDB Validation Report, obtained via RCSB PDB.'
    },
    isApplicable: function (a) {
        return a.data.models.length === 1 && prop_1.ValidationReport.isApplicable(a.data.models[0]) && model_1.Model.isFromXray(a.data.models[0]) && model_1.Model.probablyHasDensityMap(a.data.models[0]);
    },
    params: function () { return representation_preset_1.StructureRepresentationPresetProvider.CommonParams; },
    apply: function (ref, params, plugin) {
        var _a, _b, _c;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var structureCell, structure, data, colorTheme;
            var _this = this;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        structureCell = mol_state_1.StateObjectRef.resolveAndCheck(plugin.state.data, ref);
                        structure = (_a = structureCell === null || structureCell === void 0 ? void 0 : structureCell.obj) === null || _a === void 0 ? void 0 : _a.data;
                        if (!structureCell || !structure)
                            return [2 /*return*/, {}];
                        data = structure.models[0];
                        return [4 /*yield*/, plugin.runTask(mol_task_1.Task.create('Validation Report', function (runtime) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, prop_1.ValidationReportProvider.attach({ runtime: runtime, assetManager: plugin.managers.asset }, data)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _d.sent();
                        if (!((_b = prop_1.ValidationReportProvider.get(data).value) === null || _b === void 0 ? void 0 : _b.rscc) || ((_c = prop_1.ValidationReportProvider.get(data).value) === null || _c === void 0 ? void 0 : _c.rscc.size) === 0)
                            throw Error('No RSCC available');
                        colorTheme = color_1.RSCCColorThemeProvider.name;
                        return [2 /*return*/, representation_preset_1.PresetStructureRepresentations.auto.apply(ref, tslib_1.__assign(tslib_1.__assign({}, params), { theme: { globalName: colorTheme, focus: { name: colorTheme } } }), plugin)];
                }
            });
        });
    }
});
exports.RSCCScore = behavior_1.PluginBehavior.create({
    name: 'rscc-prop',
    category: 'custom-props',
    display: {
        name: 'Real-Space Correlation Coefficient',
        description: 'Real-Space Correlation Coefficient.'
    },
    ctor: /** @class */ (function (_super) {
        tslib_1.__extends(class_1, _super);
        function class_1() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.provider = prop_2.RSCCProvider;
            _this.labelProvider = {
                label: function (loci) {
                    if (!_this.params.showTooltip)
                        return;
                    switch (loci.kind) {
                        case 'element-loci':
                            if (loci.elements.length === 0)
                                return;
                            var e = loci.elements[0];
                            var u = e.unit;
                            if (!u.model.customProperties.hasReference(prop_2.RSCCProvider.descriptor))
                                return;
                            var se = structure_1.StructureElement.Location.create(loci.structure, u, u.elements[int_1.OrderedSet.getAt(e.indices, 0)]);
                            var confidenceScore = prop_2.RSCC.getScore(se);
                            return confidenceScore && confidenceScore[0] !== -1 ? "RSCC value: ".concat(confidenceScore[0], " <small>( ").concat(confidenceScore[1], " )</small>") : "No RSCC value";
                        default: return;
                    }
                }
            };
            return _this;
        }
        class_1.prototype.register = function () {
            this.ctx.customModelProperties.register(this.provider, this.params.autoAttach);
            this.ctx.managers.lociLabels.addProvider(this.labelProvider);
            this.ctx.representation.structure.themes.colorThemeRegistry.add(color_1.RSCCColorThemeProvider);
            this.ctx.builders.structure.representation.registerPreset(exports.RSCCPreset);
        };
        class_1.prototype.update = function (p) {
            var updated = this.params.autoAttach !== p.autoAttach;
            this.params.autoAttach = p.autoAttach;
            this.params.showTooltip = p.showTooltip;
            this.ctx.customModelProperties.setDefaultAutoAttach(this.provider.descriptor.name, this.params.autoAttach);
            return updated;
        };
        class_1.prototype.unregister = function () {
            this.ctx.customModelProperties.unregister(this.provider.descriptor.name);
            this.ctx.managers.lociLabels.removeProvider(this.labelProvider);
            this.ctx.representation.structure.themes.colorThemeRegistry.remove(color_1.RSCCColorThemeProvider);
            this.ctx.builders.structure.representation.unregisterPreset(exports.RSCCPreset);
        };
        return class_1;
    }(behavior_1.PluginBehavior.Handler)),
    params: function () { return ({
        autoAttach: param_definition_1.ParamDefinition.Boolean(false),
        showTooltip: param_definition_1.ParamDefinition.Boolean(true)
    }); }
});
