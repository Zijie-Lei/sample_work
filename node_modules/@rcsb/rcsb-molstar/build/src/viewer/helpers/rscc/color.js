"use strict";
/**
 * Copyright (c) 2020-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RSCCColorThemeProvider = exports.RSCCColorTheme = exports.getRSCCColorThemeParams = void 0;
var color_1 = require("molstar/lib/mol-theme/color");
var param_definition_1 = require("molstar/lib/mol-util/param-definition");
var color_2 = require("molstar/lib/mol-util/color");
var structure_1 = require("molstar/lib/mol-model/structure");
var prop_1 = require("molstar/lib/extensions/rcsb/validation-report/prop");
var legend_1 = require("molstar/lib/mol-util/legend");
var prop_2 = require("./prop");
var DefaultColor = (0, color_2.Color)(0xaaaaaa);
var Colors = [DefaultColor, (0, color_2.Color)(0xff7d45), (0, color_2.Color)(0xffdb13), (0, color_2.Color)(0x65cbf3), (0, color_2.Color)(0x0053d6)];
var ConfidenceColors = {
    'No Score': Colors[0],
    'Very low confidence': Colors[1],
    'Low confidence': Colors[2],
    'Well resolved': Colors[3],
    'Very well resolved': Colors[4]
};
var ConfidenceColorLegend = (0, legend_1.TableLegend)(Object.entries(ConfidenceColors));
function getRSCCColorThemeParams(ctx) {
    var categories = prop_2.RSCC.getCategories(ctx.structure);
    if (categories.length === 0) {
        return {
            type: param_definition_1.ParamDefinition.MappedStatic('score', {
                'score': param_definition_1.ParamDefinition.Group({})
            })
        };
    }
    return {
        type: param_definition_1.ParamDefinition.MappedStatic('score', {
            'score': param_definition_1.ParamDefinition.Group({}),
            'category': param_definition_1.ParamDefinition.Group({
                kind: param_definition_1.ParamDefinition.Select(categories[0], param_definition_1.ParamDefinition.arrayToOptions(categories))
            }, { isFlat: true })
        })
    };
}
exports.getRSCCColorThemeParams = getRSCCColorThemeParams;
function RSCCColorTheme(ctx, props) {
    var color = function () { return DefaultColor; };
    if (ctx.structure && ctx.structure.models.length > 0 && ctx.structure.models[0].customProperties.has(prop_2.RSCCProvider.descriptor)) {
        var l_1 = structure_1.StructureElement.Location.create(ctx.structure.root);
        var getColor_1 = function (location) {
            var score = prop_2.RSCC.getScore(location)[1];
            if (props.type.name !== 'score') {
                var categoryProp = props.type.params.kind;
                if (score === categoryProp)
                    return ConfidenceColors[score];
            }
            return ConfidenceColors[score];
        };
        color = function (location) {
            if (structure_1.StructureElement.Location.is(location)) {
                return getColor_1(location);
            }
            else if (structure_1.Bond.isLocation(location)) {
                l_1.unit = location.aUnit;
                l_1.element = location.aUnit.elements[location.aIndex];
                return getColor_1(l_1);
            }
            return DefaultColor;
        };
    }
    return {
        factory: RSCCColorTheme,
        granularity: 'group',
        preferSmoothing: true,
        color: color,
        props: props,
        description: 'Assigns residue colors according to the real-space correlation coefficient (RSCC) for polymer residues. Colors range from orange (very low confidence) and yellow (low confidence) to cyan (well resolved) and blue (very well resolved). Categories were obtained by archive-wide statistical analysis. Data from wwPDB Validation Report, obtained via RCSB PDB.',
        legend: ConfidenceColorLegend
    };
}
exports.RSCCColorTheme = RSCCColorTheme;
exports.RSCCColorThemeProvider = {
    name: 'rscc',
    label: 'Experimental Support Confidence',
    category: color_1.ColorTheme.Category.Validation,
    factory: RSCCColorTheme,
    getParams: getRSCCColorThemeParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(getRSCCColorThemeParams({})),
    isApplicable: function (ctx) { return !!ctx.structure && prop_1.ValidationReport.isApplicable(ctx.structure.models[0]) && structure_1.Model.isFromXray(ctx.structure.models[0]) && structure_1.Model.probablyHasDensityMap(ctx.structure.models[0]); },
    ensureCustomProperties: {
        attach: function (ctx, data) { return data.structure ? prop_2.RSCCProvider.attach(ctx, data.structure.models[0], void 0, true) : Promise.resolve(); },
        detach: function (data) { return data.structure && prop_2.RSCCProvider.ref(data.structure.models[0], false); }
    }
};
