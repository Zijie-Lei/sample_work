"use strict";
/**
 * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelLoader = void 0;
var tslib_1 = require("tslib");
var preset_1 = require("./preset");
var assets_1 = require("molstar/lib/mol-util/assets");
var transforms_1 = require("molstar/lib/mol-plugin-state/transforms");
var ModelLoader = /** @class */ (function () {
    function ModelLoader(plugin) {
        this.plugin = plugin;
    }
    ModelLoader.prototype.load = function (load, props, matrix, reprProvider, params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var fileOrUrl, format, isBinary, data, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        fileOrUrl = load.fileOrUrl, format = load.format, isBinary = load.isBinary;
                        if (!(fileOrUrl instanceof File)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.plugin.builders.data.readFile({ file: assets_1.Asset.File(fileOrUrl), isBinary: isBinary })];
                    case 1:
                        _a = (_b.sent()).data;
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.plugin.builders.data.download({ url: fileOrUrl, isBinary: isBinary })];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        data = _a;
                        return [4 /*yield*/, this.handleTrajectory(data, format, props, matrix, reprProvider, params)];
                    case 5: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    ModelLoader.prototype.parse = function (parse, props, matrix, reprProvider, params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data, format, _data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = parse.data, format = parse.format;
                        return [4 /*yield*/, this.plugin.builders.data.rawData({ data: data, label: props === null || props === void 0 ? void 0 : props.dataLabel })];
                    case 1:
                        _data = _a.sent();
                        return [4 /*yield*/, this.handleTrajectory(_data, format, props, matrix, reprProvider, params)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ModelLoader.prototype.handleTrajectory = function (data, format, props, matrix, reprProvider, params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var trajectory, selector, params_1, b;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.plugin.builders.structure.parseTrajectory(data, format)];
                    case 1:
                        trajectory = _a.sent();
                        if (!reprProvider) return [3 /*break*/, 2];
                        return [2 /*return*/, this.plugin.builders.structure.hierarchy.applyPreset(trajectory, reprProvider, params)];
                    case 2: return [4 /*yield*/, this.plugin.builders.structure.hierarchy.applyPreset(trajectory, preset_1.RcsbPreset, {
                            preset: props || { kind: 'standard', assemblyId: '' }
                        })];
                    case 3:
                        selector = _a.sent();
                        if (!(matrix && (selector === null || selector === void 0 ? void 0 : selector.structureProperties))) return [3 /*break*/, 5];
                        params_1 = {
                            transform: {
                                name: 'matrix',
                                params: { data: matrix, transpose: false }
                            }
                        };
                        b = this.plugin.state.data.build().to(selector.structureProperties)
                            .insert(transforms_1.StateTransforms.Model.TransformStructureConformation, params_1);
                        return [4 /*yield*/, this.plugin.runTask(this.plugin.state.data.updateTree(b))];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/, selector];
                }
            });
        });
    };
    return ModelLoader;
}());
exports.ModelLoader = ModelLoader;
