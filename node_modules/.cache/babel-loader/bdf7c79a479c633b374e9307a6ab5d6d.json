{"ast":null,"code":"var _jsxFileName = \"/Users/zijielei/Documents/GitHub/sample_work/src/ui/AssemblyTable.js\";\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Image from 'react-bootstrap/Image';\nimport '../App.css';\nimport * as constants from '../Data';\nimport { LightBox } from \"./LightBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class AssembliesTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      assemblies: [],\n      loaded: null\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  /**\n   * fetch assemblies data from EPPIC assembly endpoint, transform assemblies information\n   * and update state respectively\n   */\n  loadAssembliesData() {\n    if (this.props.pdbId != null) {\n      console.log(\"Loading assemblies data for \" + this.props.pdbId);\n      fetch(constants.ASSEMBLIES_END_POINT + this.props.pdbId).then(response => {\n        if (!response.ok) {\n          throw new Error(\"Fail to fetch\");\n        } else {\n          return response.json();\n        }\n      }).then(data => {\n        const transfAssembliesData = constants.transformAssembliesData(data);\n        this.setState({\n          assemblies: transfAssembliesData,\n          loaded: this.props.pdbId\n        });\n      }).catch(console.log);\n    }\n  }\n\n  /**\n   * find member interfaces for the given assembly, remove duplicate interfaces and return id of unique interfaces\n   * @param assembly assembly information fetched from loadAssembliesData()\n   * @returns {*[]} list of id of unique interfaces for the given assembly\n   */\n\n  removeDuplicateInterf(assembly) {\n    const id = [];\n    const graphEdges = assembly.graphEdges;\n    if (graphEdges) {\n      for (const key of Object.keys(graphEdges)) {\n        const interf = graphEdges[key].interfaceId;\n        if (!id.includes(interf)) {\n          id.push(interf);\n        }\n      }\n    }\n    return id;\n  }\n\n  /**\n   * find the member interface cluster for the given assembly, remove duplicate interface clusters\n   * and return id of unique interface clusters\n   *\n   * @param assembly assembly information for the given pdbId, fetched from loadAssembliesData()\n   * @returns {*[]} id of unique interface clusters for the given assembly\n   */\n  removeDuplicaateCluster(assembly) {\n    const cluster = [];\n    const graphEdges = assembly.graphEdges;\n    for (const key of Object.keys(graphEdges)) {\n      const interf = graphEdges[key].interfaceClusterId;\n      if (!cluster.includes(interf)) {\n        cluster.push(interf);\n      }\n    }\n    return cluster;\n  }\n\n  /**\n   * handle event that navigates to filtered interface page for selected assembly, assuming the given assembly has\n   * member interface clusters\n   *\n   * @param assembly assembly information for the given pdbId, fetched from loadAssembliesData()\n   */\n  handleClick(assembly) {\n    if (Number.isInteger(assembly.id)) {\n      this.props.onSelect(\"interfaces\", assembly.id);\n    } else {\n      this.props.onSelect(\"interfaces\", null);\n    }\n    this.props.onFilter(this.removeDuplicaateCluster(assembly));\n  }\n  render() {\n    if (this.props.pdbId == null) {\n      return null;\n    }\n    if (this.state.loaded !== this.props.pdbId) {\n      this.loadAssembliesData();\n      return null;\n    }\n    this.state.assemblies.sort((a, b) => a['eppic'].score > b['eppic'].score ? -1 : 1);\n    const Assemblies = _ref => {\n      let {\n        assemblies\n      } = _ref;\n      if (assemblies != null) {\n        return /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: assemblies.map(assembly => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(LightBox, {\n                id: assembly.id,\n                isDiagram: false,\n                isInterface: false,\n                pdbId: this.props.pdbId,\n                src: constants.getAssemblyImgUrl(this.props.pdbId, assembly.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(LightBox, {\n                id: assembly.id,\n                isDiagram: true,\n                isInterface: false,\n                pdbId: this.props.pdbId,\n                src: constants.getAssemblyDiagramImgUrl(this.props.pdbId, assembly.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: assembly.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: assembly.mmSizes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: assembly.stoichiometries\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: assembly.symmetries\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              title: assembly.eppic.score !== null ? `Score: ${assembly.eppic.score.toFixed(2)}` : null,\n              style: {\n                fontSize: 16,\n                textAlign: 'center',\n                fontWeight: 'bold',\n                color: assembly.eppic.callName === 'bio' ? 'green' : assembly.eppic.callName === 'xtal' ? 'red' : 'black'\n              },\n              children: [assembly.eppic.callName.toUpperCase(), assembly.eppic.score >= constants.BIO_EXCELLENT_CUTOFF && assembly.eppic.callName === 'bio' || assembly.eppic.score <= constants.XTAL_EXCELLENT_CUTOFF && assembly.eppic.callName === 'xtal' ? /*#__PURE__*/_jsxDEV(Image, {\n                style: {\n                  width: 18\n                },\n                src: constants.CONFIDENCE_EXCELLENT\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 41\n              }, this) : assembly.eppic.score >= constants.BIO_GOOD_CUTOFF && assembly.eppic.callName === 'bio' || assembly.eppic.score <= constants.XTAL_GOOD_CUTOFF && assembly.eppic.callName === 'xtal' ? /*#__PURE__*/_jsxDEV(Image, {\n                style: {\n                  width: 18\n                },\n                src: constants.CONFIDENCE_GOOD\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this), this.removeDuplicateInterf(assembly).length === 0 ? /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.removeDuplicateInterf(assembly).length + \" interface(s)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"link\",\n                onClick: () => this.handleClick(assembly),\n                children: this.removeDuplicateInterf(assembly).length + \" interface(s)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 37\n            }, this)]\n          }, assembly.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this);\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"3D view\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Assembly diagram\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Macromolecular size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Stoichiometry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Symmetry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Prediction\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Interfaces\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Assemblies, {\n        assemblies: this.state.assemblies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Button","Table","Image","constants","LightBox","jsxDEV","_jsxDEV","AssembliesTable","constructor","props","state","assemblies","loaded","handleClick","bind","loadAssembliesData","pdbId","console","log","fetch","ASSEMBLIES_END_POINT","then","response","ok","Error","json","data","transfAssembliesData","transformAssembliesData","setState","catch","removeDuplicateInterf","assembly","id","graphEdges","key","Object","keys","interf","interfaceId","includes","push","removeDuplicaateCluster","cluster","interfaceClusterId","Number","isInteger","onSelect","onFilter","render","sort","a","b","score","Assemblies","_ref","children","map","isDiagram","isInterface","src","getAssemblyImgUrl","fileName","_jsxFileName","lineNumber","columnNumber","getAssemblyDiagramImgUrl","mmSizes","stoichiometries","symmetries","title","eppic","toFixed","style","fontSize","textAlign","fontWeight","color","callName","toUpperCase","BIO_EXCELLENT_CUTOFF","XTAL_EXCELLENT_CUTOFF","width","CONFIDENCE_EXCELLENT","BIO_GOOD_CUTOFF","XTAL_GOOD_CUTOFF","CONFIDENCE_GOOD","length","variant","onClick","striped","bordered","hover"],"sources":["/Users/zijielei/Documents/GitHub/sample_work/src/ui/AssemblyTable.js"],"sourcesContent":["import React, {Component} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Image from 'react-bootstrap/Image';\nimport '../App.css';\nimport * as constants from '../Data';\nimport {LightBox} from \"./LightBox\";\n\nexport class AssembliesTable extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {assemblies: [], loaded: null};\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    /**\n     * fetch assemblies data from EPPIC assembly endpoint, transform assemblies information\n     * and update state respectively\n     */\n    loadAssembliesData() {\n        if (this.props.pdbId != null) {\n            console.log(\"Loading assemblies data for \" + this.props.pdbId);\n            fetch(constants.ASSEMBLIES_END_POINT + this.props.pdbId)\n                .then((response) => {\n                    if (!response.ok) {\n                        throw new Error(\"Fail to fetch\");\n                    } else {\n                        return response.json();\n                    }\n                })\n                .then((data) => {\n                    const transfAssembliesData = constants.transformAssembliesData(data);\n                    this.setState({assemblies: transfAssembliesData, loaded: this.props.pdbId})\n                })\n                .catch(console.log)\n        }\n    }\n\n    /**\n     * find member interfaces for the given assembly, remove duplicate interfaces and return id of unique interfaces\n     * @param assembly assembly information fetched from loadAssembliesData()\n     * @returns {*[]} list of id of unique interfaces for the given assembly\n     */\n\n    removeDuplicateInterf(assembly) {\n        const id = [];\n        const graphEdges = assembly.graphEdges;\n        if (graphEdges) {\n            for (const key of Object.keys(graphEdges)) {\n                const interf = graphEdges[key].interfaceId;\n                if (!id.includes(interf)) {\n                    id.push(interf);\n                }\n            }\n        }\n        return id;\n    }\n\n    /**\n     * find the member interface cluster for the given assembly, remove duplicate interface clusters\n     * and return id of unique interface clusters\n     *\n     * @param assembly assembly information for the given pdbId, fetched from loadAssembliesData()\n     * @returns {*[]} id of unique interface clusters for the given assembly\n     */\n    removeDuplicaateCluster(assembly) {\n        const cluster = [];\n        const graphEdges = assembly.graphEdges;\n        for (const key of Object.keys(graphEdges)) {\n            const interf = graphEdges[key].interfaceClusterId;\n            if (!cluster.includes(interf)) {\n                cluster.push(interf);\n            }\n        }\n        return cluster;\n    }\n\n    /**\n     * handle event that navigates to filtered interface page for selected assembly, assuming the given assembly has\n     * member interface clusters\n     *\n     * @param assembly assembly information for the given pdbId, fetched from loadAssembliesData()\n     */\n    handleClick(assembly) {\n        if (Number.isInteger(assembly.id)) {\n            this.props.onSelect(\"interfaces\", assembly.id);\n        } else {\n            this.props.onSelect(\"interfaces\", null);\n        }\n        this.props.onFilter(this.removeDuplicaateCluster(assembly));\n    }\n\n    render() {\n        if (this.props.pdbId == null) {\n            return null;\n        }\n\n        if (this.state.loaded !== this.props.pdbId) {\n            this.loadAssembliesData();\n            return null;\n        }\n\n        this.state.assemblies.sort((a, b) => a['eppic'].score > b['eppic'].score ? -1 : 1)\n\n        const Assemblies = ({assemblies}) => {\n            if (assemblies != null) {\n                return (\n                    <tbody>\n                    {assemblies.map((assembly) => (\n                        <tr key={assembly.id}>\n                            <td><LightBox id={assembly.id}\n                                          isDiagram={false}\n                                          isInterface={false}\n                                          pdbId={this.props.pdbId}\n                                          src={constants.getAssemblyImgUrl(this.props.pdbId, assembly.id)}>\n                            </LightBox></td>\n                            <td><LightBox id={assembly.id}\n                                          isDiagram={true}\n                                          isInterface={false}\n                                          pdbId={this.props.pdbId}\n                                          src={constants.getAssemblyDiagramImgUrl(this.props.pdbId, assembly.id)}>\n                            </LightBox></td>\n                            <td>{assembly.id}</td>\n                            <td>{assembly.mmSizes}</td>\n                            <td>{assembly.stoichiometries}</td>\n                            <td>{assembly.symmetries}</td>\n                            <td title={assembly.eppic.score !== null ? `Score: ${assembly.eppic.score.toFixed(2)}` : null}\n                                style={{\n                                    fontSize: 16,\n                                    textAlign: 'center',\n                                    fontWeight: 'bold',\n                                    color: assembly.eppic.callName === 'bio' ? 'green' : assembly.eppic.callName === 'xtal' ? 'red' : 'black'\n                                }}>\n                                {assembly.eppic.callName.toUpperCase()}\n                                {\n                                    (assembly.eppic.score >= constants.BIO_EXCELLENT_CUTOFF && assembly.eppic.callName === 'bio') || (assembly.eppic.score <= constants.XTAL_EXCELLENT_CUTOFF && assembly.eppic.callName === 'xtal') ?\n                                        <Image style={{width: 18}} src={constants.CONFIDENCE_EXCELLENT}/>\n                                        :\n                                        (assembly.eppic.score >= constants.BIO_GOOD_CUTOFF && assembly.eppic.callName === 'bio') || (assembly.eppic.score <= constants.XTAL_GOOD_CUTOFF && assembly.eppic.callName === 'xtal') ?\n                                            <Image style={{width: 18}} src={constants.CONFIDENCE_GOOD}/>\n                                            :\n                                            <div></div>\n\n                                }\n                            </td>\n                            {\n                                this.removeDuplicateInterf(assembly).length === 0 ?\n                                    <td>{this.removeDuplicateInterf(assembly).length + \" interface(s)\"}</td>\n                                    :\n                                    <td><Button variant=\"link\"\n                                                onClick={() => this.handleClick(assembly)}>{this.removeDuplicateInterf(assembly).length + \" interface(s)\"}</Button>\n                                    </td>\n                            }\n                        </tr>\n                    ))}\n                    </tbody>\n                )\n            } else {\n                return (\n                    <tbody>\n                    </tbody>);\n            }\n        };\n        return (\n            <Table striped bordered hover>\n                <thead>\n                <tr>\n                    <th>3D view</th>\n                    <th>Assembly diagram</th>\n                    <th>ID</th>\n                    <th>Macromolecular size</th>\n                    <th>Stoichiometry</th>\n                    <th>Symmetry</th>\n                    <th>Prediction</th>\n                    <th>Interfaces</th>\n                </tr>\n                </thead>\n\n                <Assemblies assemblies={this.state.assemblies}/>\n\n            </Table>\n        );\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}