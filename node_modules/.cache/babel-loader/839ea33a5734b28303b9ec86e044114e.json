{"ast":null,"code":"var _jsxFileName = \"/Users/zijielei/Documents/GitHub/sample_work/src/ui/LightBox.js\",\n  _s = $RefreshSig$();\nimport React, { Component, useState, useEffect, createRef } from 'react';\nimport '../App.css';\nimport * as constants from '../Data';\nimport { Network } from 'vis';\nimport { Viewer } from '@rcsb/rcsb-molstar/build/dist/viewer/rcsb-molstar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Molstar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      molstar: null,\n      config: null,\n      url: null,\n      chains: null,\n      coreResidue: null,\n      componentsAdded: false\n    };\n  }\n\n  /**\n   * Initialize Molstar component and set parameters as needed\n   */\n  componentDidMount() {\n    function getQueryParam(id) {\n      const a = new RegExp(id + '=([^&#=]*)', 'i');\n      const m = a.exec(window.location.search);\n      return m ? decodeURIComponent(m[1]) : undefined;\n    }\n    const _config = getQueryParam('config');\n    const config = _config && JSON.parse(_config);\n\n    // initialize Molstar viewer\n    const viewer = new Viewer('viewer', {\n      showImportControls: true,\n      showSessionControls: false,\n      layoutShowLog: false,\n      layoutShowControls: false,\n      showMembraneOrientationPreset: true,\n      showNakbColorTheme: true,\n      detachedFromSierra: true\n    });\n    this.setState({\n      molstar: viewer,\n      config: config\n    });\n\n    // If Molstar component is for visualizing interfaces\n    if (this.props.isInterface) {\n      const chainUrl = constants.INTERF_END_POINT + this.props.pdbId;\n      fetch(chainUrl).then(response => {\n        if (!response.ok) {\n          throw new Error(\"Fail to fetch\");\n        } else {\n          return response.json();\n        }\n      }).then(data => {\n        const target = data.filter(each => each.interfaceId === this.props.id)[0];\n        if (target.chain1 === target.chain2) {\n          target.chain2 = target.chain2 + \"_1\";\n        }\n        this.setState({\n          chains: [target.chain1, target.chain2]\n        });\n      }).catch(console.log);\n      const coreUrl = constants.INTERF_RESIDUE_END_POINT + this.props.pdbId + \"/\" + this.props.id;\n      fetch(coreUrl).then(response => {\n        if (!response.ok) {\n          throw new Error(\"Fail to fetch\");\n        } else {\n          return response.json();\n        }\n      }).then(data => {\n        this.setState({\n          coreResidue: data.filter(each => each.region === 3)\n        });\n      }).catch(console.log);\n    }\n  }\n  render() {\n    // if loading Molstar for Interface\n    if (this.props.isInterface) {\n      if (this.state.url == null) {\n        this.setState({\n          url: constants.getInterfCifUrl(this.props.pdbId, this.props.id)\n        });\n      }\n\n      // if core residues exist for given interface, highlight these residues with different visualization\n      if (this.state.molstar && !this.state.componentsAdded && this.state.coreResidue) {\n        this.setState({\n          url: constants.getInterfCifUrl(this.props.pdbId, this.props.id)\n        });\n        this.state.molstar.loadStructureFromUrl(this.state.url, 'mmcif', false, this.state.config).then(resolved => {\n          this.state.molstar.createComponent('Chain 1 Core Residues', this.state.coreResidue.filter(cr => cr.side).map(cr => ({\n            modelId: resolved.structure.obj.data.units[0].model.id,\n            labelAsymId: this.state.chains[0],\n            labelSeqId: cr['residueNumber']\n          })), \"ball-and-stick\");\n          this.state.molstar.createComponent('Chain 2 Core Residues', this.state.coreResidue.filter(cr => !cr.side).map(cr => ({\n            modelId: resolved.structure.obj.data.units[0].model.id,\n            labelAsymId: this.state.chains[1],\n            labelSeqId: cr['residueNumber']\n          })), \"ball-and-stick\");\n        });\n        this.setState({\n          componentsAdded: true\n        });\n      }\n    } else {\n      // if loading Molstar for Assembly\n      if (this.state.url == null) {\n        this.setState({\n          url: constants.getAssemblyCifUrl(this.props.pdbId, this.props.id)\n        });\n      }\n      if (this.state.molstar) {\n        this.state.molstar.loadStructureFromUrl(this.state.url, 'mmcif', false, this.state.config);\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: 'viewer'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst LightBoxViewer = _ref => {\n  _s();\n  let {\n    children,\n    src,\n    isDiagram,\n    pdbId,\n    id,\n    isInterface\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(true);\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const toggleIsOpen = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleChild = e => {\n    e.stopPropagation();\n  };\n\n  // specify style for lightbox\n  const diagramStyle = {\n    background: \"white\",\n    display: 'inline-block',\n    width: \"70%\",\n    height: \"90%\",\n    position: \"relative\",\n    border: \"solid grey 1px\"\n  };\n  if (src != null && nodes.length === 0 && edges.length === 0) {\n    setNodes(src.nodes);\n    setEdges(src.edges);\n  }\n\n  // initialize diagram\n  const container = /*#__PURE__*/createRef();\n  const initialNodeSize = 10;\n  useEffect(() => {\n    const options = {\n      nodes: {\n        shape: 'dot',\n        size: initialNodeSize\n      },\n      edges: {\n        smooth: {\n          enabled: false,\n          type: \"dynamic\",\n          roundness: 1.0\n        },\n        arrows: 'to'\n      },\n      physics: false\n    };\n    if (container.current != null) {\n      container.current = new Network(container.current, {\n        nodes,\n        edges\n      }, options);\n      container.current.on(\"zoom\", function (params) {\n        options.nodes.size = initialNodeSize / params.scale;\n        container.current.setOptions(options);\n      });\n    }\n  }, [container, nodes, edges]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: toggleIsOpen,\n    children: [children, isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: toggleIsOpen,\n      style: {\n        position: 'fixed',\n        top: '0',\n        left: '0',\n        height: '100vh',\n        width: '100vw',\n        backgroundColor: 'rgba(0,0,0,0.7)',\n        cursor: 'pointer'\n      },\n      children: isDiagram === true ?\n      /*#__PURE__*/\n      // if lightbox is for diagram\n      _jsxDEV(\"div\", {\n        onClick: handleChild,\n        ref: container,\n        style: diagramStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }, this) :\n      /*#__PURE__*/\n      // if lightbox is for Molstar\n      _jsxDEV(\"div\", {\n        onClick: handleChild,\n        style: diagramStyle,\n        children: /*#__PURE__*/_jsxDEV(Molstar, {\n          pdbId: pdbId,\n          isInterface: isInterface,\n          id: id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 9\n  }, this);\n};\n\n/**\n * Main class for the light box feature\n */\n_s(LightBoxViewer, \"ngjlTixU4iLSQCrVErCTpiOzTAw=\");\n_c = LightBoxViewer;\nexport class LightBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pdbId: null,\n      diagram: null,\n      open: false,\n      molstar: null\n    };\n    this.loadDiagramData = this.loadDiagramData.bind(this);\n    this.onClickOpen = this.onClickOpen.bind(this);\n  }\n\n  /**\n   * Fetch diagram data for the specific assembly for given PDB ID, update state respectively\n   *\n   * @param pdbId selected PDB ID\n   * @param assembly selected assembly\n   */\n  loadDiagramData(pdbId, assembly) {\n    fetch(constants.ASSEMBLIES_DIAGRAM_END_POINT + pdbId + \"/\" + assembly).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Fail to fetch\");\n      } else {\n        return response.json();\n      }\n    }).then(data => {\n      this.setState({\n        diagram: data,\n        pdbId: pdbId\n      });\n    }).catch(console.log);\n  }\n\n  /**\n   * handles the event of opening lightbox\n   */\n  onClickOpen() {\n    this.setState({\n      open: !this.state.open\n    });\n  }\n  render() {\n    if (!this.state.open) {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: this.props.src,\n        alt: \"Assembly\",\n        onClick: this.onClickOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this);\n    }\n    // If the selected visualization is diagram instead of Molstar\n    if (this.state.pdbId !== this.props.pdbId && this.props.isDiagram === true) {\n      this.loadDiagramData(this.props.pdbId, this.props.id);\n    }\n    const image = /*#__PURE__*/_jsxDEV(\"img\", {\n      src: this.props.src,\n      alt: \"Assembly\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 23\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(LightBoxViewer, {\n        id: this.props.id,\n        pdbId: this.props.pdbId,\n        isInterface: this.props.isInterface,\n        children: image,\n        src: this.state.diagram,\n        isDiagram: this.props.isDiagram\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }, this);\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"LightBoxViewer\");","map":{"version":3,"names":["React","Component","useState","useEffect","createRef","constants","Network","Viewer","jsxDEV","_jsxDEV","Molstar","constructor","props","state","molstar","config","url","chains","coreResidue","componentsAdded","componentDidMount","getQueryParam","id","a","RegExp","m","exec","window","location","search","decodeURIComponent","undefined","_config","JSON","parse","viewer","showImportControls","showSessionControls","layoutShowLog","layoutShowControls","showMembraneOrientationPreset","showNakbColorTheme","detachedFromSierra","setState","isInterface","chainUrl","INTERF_END_POINT","pdbId","fetch","then","response","ok","Error","json","data","target","filter","each","interfaceId","chain1","chain2","catch","console","log","coreUrl","INTERF_RESIDUE_END_POINT","region","render","getInterfCifUrl","loadStructureFromUrl","resolved","createComponent","cr","side","map","modelId","structure","obj","units","model","labelAsymId","labelSeqId","getAssemblyCifUrl","children","fileName","_jsxFileName","lineNumber","columnNumber","LightBoxViewer","_ref","_s","src","isDiagram","isOpen","setIsOpen","nodes","setNodes","edges","setEdges","toggleIsOpen","handleChild","e","stopPropagation","diagramStyle","background","display","width","height","position","border","length","container","initialNodeSize","options","shape","size","smooth","enabled","type","roundness","arrows","physics","current","on","params","scale","setOptions","onClick","style","top","left","backgroundColor","cursor","ref","_c","LightBox","diagram","open","loadDiagramData","bind","onClickOpen","assembly","ASSEMBLIES_DIAGRAM_END_POINT","alt","image","$RefreshReg$"],"sources":["/Users/zijielei/Documents/GitHub/sample_work/src/ui/LightBox.js"],"sourcesContent":["import React, {Component, useState, useEffect, createRef} from 'react';\nimport '../App.css';\nimport * as constants from '../Data';\nimport {Network} from 'vis';\nimport {Viewer} from '@rcsb/rcsb-molstar/build/dist/viewer/rcsb-molstar';\n\n\nexport class Molstar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {molstar: null, config: null, url: null, chains: null, coreResidue: null, componentsAdded: false};\n    }\n\n    /**\n     * Initialize Molstar component and set parameters as needed\n     */\n    componentDidMount() {\n        function getQueryParam(id) {\n            const a = new RegExp(id + '=([^&#=]*)', 'i')\n            const m = a.exec(window.location.search)\n            return m ? decodeURIComponent(m[1]) : undefined\n        }\n\n        const _config = getQueryParam('config');\n        const config = _config && JSON.parse(_config);\n\n        // initialize Molstar viewer\n        const viewer = new Viewer('viewer', {\n            showImportControls: true,\n            showSessionControls: false,\n            layoutShowLog: false,\n            layoutShowControls: false,\n            showMembraneOrientationPreset: true,\n            showNakbColorTheme: true,\n            detachedFromSierra: true,\n        });\n        this.setState({molstar: viewer, config: config});\n\n        // If Molstar component is for visualizing interfaces\n        if (this.props.isInterface) {\n            const chainUrl = constants.INTERF_END_POINT + this.props.pdbId\n            fetch(chainUrl)\n                .then((response) => {\n                    if (!response.ok) {\n                        throw new Error(\"Fail to fetch\");\n                    } else {\n                        return response.json();\n                    }\n                })\n                .then((data) => {\n                    const target = data.filter(each => each.interfaceId === this.props.id)[0]\n                    if (target.chain1 === target.chain2) {\n                        target.chain2 = target.chain2 + \"_1\"\n                    }\n                    this.setState({chains: [target.chain1, target.chain2]})\n                })\n                .catch(console.log)\n\n            const coreUrl = constants.INTERF_RESIDUE_END_POINT + this.props.pdbId + \"/\" + this.props.id\n            fetch(coreUrl)\n                .then((response) => {\n                    if (!response.ok) {\n                        throw new Error(\"Fail to fetch\");\n                    } else {\n                        return response.json();\n                    }\n                })\n                .then((data) => {\n                    this.setState({coreResidue: data.filter(each => each.region === 3)})\n                })\n                .catch(console.log)\n        }\n    }\n\n    render() {\n        // if loading Molstar for Interface\n        if (this.props.isInterface) {\n\n            if (this.state.url == null) {\n                this.setState({url: constants.getInterfCifUrl(this.props.pdbId, this.props.id)})\n            }\n\n            // if core residues exist for given interface, highlight these residues with different visualization\n            if (this.state.molstar && !this.state.componentsAdded && this.state.coreResidue) {\n                this.setState({url: constants.getInterfCifUrl(this.props.pdbId, this.props.id)})\n                this.state.molstar.loadStructureFromUrl(this.state.url, 'mmcif', false, this.state.config).then((resolved) => {\n                    this.state.molstar.createComponent(\n                        'Chain 1 Core Residues',\n                        this.state.coreResidue.filter(cr => (\n                            cr.side\n                        )).map(cr => ({\n                                modelId: resolved.structure.obj.data.units[0].model.id,\n                                labelAsymId: this.state.chains[0],\n                                labelSeqId: cr['residueNumber']\n                            })\n                        ),\n                        \"ball-and-stick\"\n                    );\n                    this.state.molstar.createComponent(\n                        'Chain 2 Core Residues',\n                        this.state.coreResidue.filter(cr => (\n                            !cr.side\n                        )).map(\n                            cr => ({\n                                modelId: resolved.structure.obj.data.units[0].model.id,\n                                labelAsymId: this.state.chains[1],\n                                labelSeqId: cr['residueNumber']\n                            })\n                        ),\n                        \"ball-and-stick\"\n                    );\n                });\n                this.setState({componentsAdded: true});\n            }\n        } else {\n            // if loading Molstar for Assembly\n            if (this.state.url == null) {\n                this.setState({url: constants.getAssemblyCifUrl(this.props.pdbId, this.props.id)})\n            }\n            if (this.state.molstar) {\n                this.state.molstar.loadStructureFromUrl(this.state.url, 'mmcif', false, this.state.config)\n            }\n        }\n        return (\n            <div>\n                <div id={'viewer'}/>\n            </div>\n        );\n    }\n}\n\nconst LightBoxViewer = ({children, src, isDiagram, pdbId, id, isInterface}) => {\n    const [isOpen, setIsOpen] = useState(true);\n    const [nodes, setNodes] = useState([]);\n    const [edges, setEdges] = useState([]);\n    const toggleIsOpen = () => {\n        setIsOpen(!isOpen);\n    };\n    const handleChild = (e) => {\n        e.stopPropagation();\n    };\n\n    // specify style for lightbox\n    const diagramStyle = {\n        background: \"white\",\n        display: 'inline-block',\n        width: \"70%\",\n        height: \"90%\",\n        position: \"relative\",\n        border: \"solid grey 1px\"\n    }\n\n    if (src != null && nodes.length === 0 && edges.length === 0) {\n        setNodes(src.nodes)\n        setEdges(src.edges)\n    }\n\n    // initialize diagram\n    const container = createRef();\n    const initialNodeSize = 10;\n\n    useEffect(() => {\n        const options = {\n            nodes: {\n                shape: 'dot',\n                size: initialNodeSize,\n            },\n            edges: {\n                smooth: {\n                    enabled: false,\n                    type: \"dynamic\",\n                    roundness: 1.0\n                },\n                arrows: 'to',\n            },\n            physics: false\n        };\n        if (container.current != null) {\n            container.current = new Network(container.current, {nodes, edges}, options);\n            container.current.on(\"zoom\", function (params) {\n                options.nodes.size = initialNodeSize / params.scale;\n                container.current.setOptions(options);\n            });\n        }\n\n    }, [container, nodes, edges]);\n\n    return (\n        <div onClick={toggleIsOpen}>\n            {children}\n            {isOpen ?\n                <div onClick={toggleIsOpen} style={{\n                    position: 'fixed',\n                    top: '0',\n                    left: '0',\n                    height: '100vh',\n                    width: '100vw',\n                    backgroundColor: 'rgba(0,0,0,0.7)',\n                    cursor: 'pointer'\n                }}>\n                    {isDiagram === true ?\n                        // if lightbox is for diagram\n                        <div onClick={handleChild} ref={container} style={diagramStyle}/>\n                        :\n                        // if lightbox is for Molstar\n                        <div onClick={handleChild} style={diagramStyle}>\n                            <Molstar pdbId={pdbId} isInterface={isInterface}\n                                     id={id}/>\n                        </div>\n\n                    }\n                </div>\n                : null}\n        </div>\n    );\n};\n\n/**\n * Main class for the light box feature\n */\nexport class LightBox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {pdbId: null, diagram: null, open: false, molstar: null}\n        this.loadDiagramData = this.loadDiagramData.bind(this);\n        this.onClickOpen = this.onClickOpen.bind(this);\n    }\n\n    /**\n     * Fetch diagram data for the specific assembly for given PDB ID, update state respectively\n     *\n     * @param pdbId selected PDB ID\n     * @param assembly selected assembly\n     */\n    loadDiagramData(pdbId, assembly) {\n        fetch(constants.ASSEMBLIES_DIAGRAM_END_POINT + pdbId + \"/\" + assembly)\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(\"Fail to fetch\");\n                } else {\n                    return response.json();\n                }\n            })\n            .then((data) => {\n                this.setState({diagram: data, pdbId: pdbId})\n            })\n            .catch(console.log)\n    }\n\n    /**\n     * handles the event of opening lightbox\n     */\n    onClickOpen() {\n        this.setState({open: !this.state.open})\n    }\n\n    render() {\n        if (!this.state.open) {\n            return (\n                <img src={this.props.src} alt=\"Assembly\" onClick={this.onClickOpen}/>\n            )\n        }\n        // If the selected visualization is diagram instead of Molstar\n        if (this.state.pdbId !== this.props.pdbId && this.props.isDiagram === true) {\n            this.loadDiagramData(this.props.pdbId, this.props.id);\n        }\n\n        const image = <img src={this.props.src} alt=\"Assembly\"/>\n\n        return (\n            <div>\n                <LightBoxViewer id={this.props.id} pdbId={this.props.pdbId} isInterface={this.props.isInterface}\n                                children={image} src={this.state.diagram} isDiagram={this.props.isDiagram}/>\n            </div>\n        );\n\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}