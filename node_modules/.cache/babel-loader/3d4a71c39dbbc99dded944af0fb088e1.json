{"ast":null,"code":"var _jsxFileName = \"/Users/zijielei/Documents/GitHub/sample_work/src/ui/InterfaceTable.js\";\nimport React, { Component } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Image from 'react-bootstrap/Image';\nimport '../App.css';\nimport * as constants from '../Data';\nimport { LightBox } from \"./LightBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class InterfTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      interfs: [],\n      loaded: null\n    };\n  }\n\n  /**\n   * fetch Interface data from EPPIC endpoint, update state respectively\n   */\n  loadInterfData() {\n    if (this.props.pdbId != null) {\n      console.log(\"Loading interface data for \" + this.props.pdbId);\n      fetch(constants.INTERF_END_POINT + this.props.pdbId).then(response => {\n        if (!response.ok) {\n          throw new Error(\"Fail to fetch\");\n        } else {\n          return response.json();\n        }\n      }).then(data => {\n        const transfInterfs = constants.transformInterfData(data);\n        this.setState({\n          interfs: transfInterfs,\n          loaded: this.props.pdbId\n        });\n      }).catch(console.log);\n    }\n  }\n\n  /**\n   * Filter the interface data by cluster ID\n   *\n   * @param id selected cluster ID\n   * @returns {T[]} interfaces with specified cluster ID\n   */\n  clusterFilter(id) {\n    return this.state.interfs.filter(interf => {\n      return interf.clusterId === id;\n    });\n  }\n\n  /**\n   * Return average area of the selected interface cluster\n   * @param group selected interface cluster\n   * @returns {string} the average area of the cluster\n   */\n  getAverage(group) {\n    let sum = 0;\n    for (let i = 0; i < group.length; i++) {\n      sum += group[i].area;\n    }\n    let avg = sum / group.length;\n    return avg.toFixed(2);\n  }\n\n  /**\n   * Render interfaces grouped by cluster ID\n   *\n   * @returns {*[]} list of interface clusters\n   */\n  renderItem() {\n    // list of interface clusters that are to be rendered\n    const summary = [];\n    let i = 1;\n    while (this.clusterFilter(i).length > 0) {\n      if (this.props.interfaceClusterIdsToFilter == null || this.props.interfaceClusterIdsToFilter.includes(i)) {\n        // initialize one cluster to be rendered\n        summary.push({\n          cluster: \"Cluster: \" + i,\n          area: this.getAverage(this.clusterFilter(i)),\n          interface: this.clusterFilter(i),\n          number: this.clusterFilter(i).length + \" interface(s)\"\n        });\n      }\n      i++;\n    }\n    const clusters = [];\n    for (let index in summary) {\n      let item = summary[index];\n\n      // fill overall information for one cluster\n      const itemRows = [/*#__PURE__*/_jsxDEV(\"tr\", {\n        style: {\n          fontWeight: 'bold',\n          borderWidth: 50\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.cluster\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.area\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, \"row-data-\" + item.cluster, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)];\n\n      // fill interface-specific information for one cluster\n      itemRows.push(item.interface.map(interf => /*#__PURE__*/_jsxDEV(\"tr\", {\n        style: {\n          background: 'whitesmoke'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(LightBox, {\n            id: interf.interfaceId,\n            isDiagram: false,\n            isInterface: true,\n            pdbId: this.props.pdbId,\n            src: constants.getInterfImgUrl(this.props.pdbId, interf.interfaceId)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: interf.interfaceId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: interf.chain1 + \" + \" + interf.chain2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: interf.area.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: constants.getOpTypeImgUrl(interf.operatorType),\n            alt: \"Operator\",\n            title: interf.operator\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          title: interf[\"eppic-cs\"].score !== undefined ? `Score: ${interf[\"eppic-cs\"].score.toFixed(2)}` : interf['eppic-cs'].callReason,\n          style: {\n            color: interf[\"eppic-cs\"].callName === 'bio' ? 'green' : interf[\"eppic-cs\"].callName === 'xtal' ? 'red' : 'black'\n          },\n          children: interf[\"eppic-cs\"].callName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          title: interf[\"eppic\"].score !== null ? `Score: ${interf[\"eppic\"].score.toFixed(2)}` : null,\n          style: {\n            fontSize: 16,\n            textAlign: 'center',\n            fontWeight: 'bold',\n            color: interf[\"eppic\"].callName === 'bio' ? 'green' : interf[\"eppic\"].callName === 'xtal' ? 'red' : 'black'\n          },\n          children: [interf[\"eppic\"].callName.toUpperCase(), interf[\"eppic\"].score >= constants.BIO_EXCELLENT_CUTOFF && interf[\"eppic\"].callName === 'bio' || interf[\"eppic\"].score <= constants.XTAL_EXCELLENT_CUTOFF && interf[\"eppic\"].callName === 'xtal' ? /*#__PURE__*/_jsxDEV(Image, {\n            style: {\n              width: 18\n            },\n            src: constants.CONFIDENCE_EXCELLENT\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 37\n          }, this) : interf[\"eppic\"].score >= constants.BIO_GOOD_CUTOFF && interf[\"eppic\"].callName === 'bio' || interf[\"eppic\"].score <= constants.XTAL_GOOD_CUTOFF && interf[\"eppic\"].callName === 'xtal' ? /*#__PURE__*/_jsxDEV(Image, {\n            style: {\n              width: 18\n            },\n            src: constants.CONFIDENCE_GOOD\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this)]\n      }, \"row-expanded-\" + interf.interfaceId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)));\n      clusters.push(itemRows);\n    }\n    return clusters;\n  }\n  render() {\n    if (this.props.pdbId == null) {\n      return null;\n    }\n    if (this.state.loaded !== this.props.pdbId) {\n      this.loadInterfData();\n      return null;\n    }\n    let allItemRows = this.renderItem();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Chains\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Area\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Operator\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Core-Surface\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Final\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: allItemRows\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Table","Image","constants","LightBox","jsxDEV","_jsxDEV","InterfTable","constructor","props","state","interfs","loaded","loadInterfData","pdbId","console","log","fetch","INTERF_END_POINT","then","response","ok","Error","json","data","transfInterfs","transformInterfData","setState","catch","clusterFilter","id","filter","interf","clusterId","getAverage","group","sum","i","length","area","avg","toFixed","renderItem","summary","interfaceClusterIdsToFilter","includes","push","cluster","interface","number","clusters","index","item","itemRows","style","fontWeight","borderWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","map","background","interfaceId","isDiagram","isInterface","src","getInterfImgUrl","chain1","chain2","getOpTypeImgUrl","operatorType","alt","title","operator","score","undefined","callReason","color","callName","fontSize","textAlign","toUpperCase","BIO_EXCELLENT_CUTOFF","XTAL_EXCELLENT_CUTOFF","width","CONFIDENCE_EXCELLENT","BIO_GOOD_CUTOFF","XTAL_GOOD_CUTOFF","CONFIDENCE_GOOD","render","allItemRows","bordered","hover"],"sources":["/Users/zijielei/Documents/GitHub/sample_work/src/ui/InterfaceTable.js"],"sourcesContent":["import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Image from 'react-bootstrap/Image';\nimport '../App.css';\nimport * as constants from '../Data';\nimport {LightBox} from \"./LightBox\";\n\nexport class InterfTable extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {interfs: [], loaded: null};\n    }\n\n    /**\n     * fetch Interface data from EPPIC endpoint, update state respectively\n     */\n    loadInterfData() {\n        if (this.props.pdbId != null) {\n            console.log(\"Loading interface data for \" + this.props.pdbId);\n            fetch(constants.INTERF_END_POINT + this.props.pdbId)\n                .then((response) => {\n                    if (!response.ok) {\n                        throw new Error(\"Fail to fetch\");\n                    } else {\n                        return response.json();\n                    }\n                })\n                .then((data) => {\n                    const transfInterfs = constants.transformInterfData(data);\n                    this.setState({interfs: transfInterfs, loaded: this.props.pdbId})\n                })\n                .catch(console.log)\n        }\n    }\n\n    /**\n     * Filter the interface data by cluster ID\n     *\n     * @param id selected cluster ID\n     * @returns {T[]} interfaces with specified cluster ID\n     */\n    clusterFilter(id) {\n        return this.state.interfs.filter(interf => {\n            return interf.clusterId === id;\n        })\n    }\n\n    /**\n     * Return average area of the selected interface cluster\n     * @param group selected interface cluster\n     * @returns {string} the average area of the cluster\n     */\n    getAverage(group) {\n        let sum = 0;\n        for (let i = 0; i < group.length; i++) {\n            sum += group[i].area;\n        }\n        let avg = sum / group.length;\n        return avg.toFixed(2);\n    }\n\n    /**\n     * Render interfaces grouped by cluster ID\n     *\n     * @returns {*[]} list of interface clusters\n     */\n    renderItem() {\n        // list of interface clusters that are to be rendered\n        const summary = [];\n        let i = 1;\n        while (this.clusterFilter(i).length > 0) {\n            if (this.props.interfaceClusterIdsToFilter == null || this.props.interfaceClusterIdsToFilter.includes(i)) {\n                // initialize one cluster to be rendered\n                summary.push({\n                    cluster: \"Cluster: \" + i,\n                    area: this.getAverage(this.clusterFilter(i)),\n                    interface: this.clusterFilter(i),\n                    number: this.clusterFilter(i).length + \" interface(s)\"\n                });\n            }\n            i++;\n        }\n\n        const clusters = []\n\n        for (let index in summary) {\n            let item = summary[index];\n\n            // fill overall information for one cluster\n            const itemRows = [\n                <tr\n                    key={\"row-data-\" + item.cluster}\n                    style={{fontWeight: 'bold', borderWidth: 50}}>\n                    <td>{item.number}</td>\n                    <td>{item.cluster}</td>\n                    <td></td>\n                    <td>{item.area}</td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                </tr>\n            ];\n\n            // fill interface-specific information for one cluster\n            itemRows.push(\n                item.interface.map((interf) => (\n                    <tr key={\"row-expanded-\" + interf.interfaceId} style={{background: 'whitesmoke'}}>\n                        <td><LightBox id={interf.interfaceId}\n                                      isDiagram={false}\n                                      isInterface={true}\n                                      pdbId={this.props.pdbId}\n                                      src={constants.getInterfImgUrl(this.props.pdbId, interf.interfaceId)}>\n                        </LightBox></td>\n                        <td>{interf.interfaceId}</td>\n                        <td>{interf.chain1 + \" + \" + interf.chain2}</td>\n                        <td>{interf.area.toFixed(2)}</td>\n                        <td><img src={constants.getOpTypeImgUrl(interf.operatorType)} alt=\"Operator\"\n                                 title={interf.operator}/></td>\n                        <td title={interf[\"eppic-cs\"].score !== undefined ? `Score: ${interf[\"eppic-cs\"].score.toFixed(2)}` : interf['eppic-cs'].callReason}\n                            style={{color: interf[\"eppic-cs\"].callName === 'bio' ? 'green' : interf[\"eppic-cs\"].callName === 'xtal' ? 'red' : 'black'}}>\n                            {interf[\"eppic-cs\"].callName}</td>\n                        <td title={interf[\"eppic\"].score !== null ? `Score: ${interf[\"eppic\"].score.toFixed(2)}` : null}\n                            style={{\n                                fontSize: 16,\n                                textAlign: 'center',\n                                fontWeight: 'bold',\n                                color: interf[\"eppic\"].callName === 'bio' ? 'green' : interf[\"eppic\"].callName === 'xtal' ? 'red' : 'black'\n                            }}>\n                            {interf[\"eppic\"].callName.toUpperCase()}\n                            {\n                                (interf[\"eppic\"].score >= constants.BIO_EXCELLENT_CUTOFF && interf[\"eppic\"].callName === 'bio') || (interf[\"eppic\"].score <= constants.XTAL_EXCELLENT_CUTOFF && interf[\"eppic\"].callName === 'xtal') ?\n                                    <Image style={{width: 18}} src={constants.CONFIDENCE_EXCELLENT}/>\n                                    :\n                                    (interf[\"eppic\"].score >= constants.BIO_GOOD_CUTOFF && interf[\"eppic\"].callName === 'bio') || (interf[\"eppic\"].score <= constants.XTAL_GOOD_CUTOFF && interf[\"eppic\"].callName === 'xtal') ?\n                                        <Image style={{width: 18}} src={constants.CONFIDENCE_GOOD}/>\n                                        :\n                                        <div></div>\n                            }\n                        </td>\n                    </tr>\n                ))\n            );\n\n            clusters.push(itemRows);\n        }\n        return clusters;\n    }\n\n    render() {\n        if (this.props.pdbId == null) {\n            return null;\n        }\n\n        if (this.state.loaded !== this.props.pdbId) {\n            this.loadInterfData();\n            return null;\n        }\n\n        let allItemRows = this.renderItem();\n\n        return (\n            <div>\n                <Table bordered hover>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>ID</th>\n                        <th>Chains</th>\n                        <th>Area</th>\n                        <th>Operator</th>\n                        <th>Core-Surface</th>\n                        <th>Final</th>\n                    </tr>\n                    </thead>\n\n                    <tbody>\n                    {allItemRows}\n                    </tbody>\n                </Table>\n\n            </div>\n        );\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}